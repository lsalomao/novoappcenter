# compiler: R8
# compiler_version: 1.5.64
# min_api: 16
# pg_map_id: ffa7ac1
androidx.activity.Cancellable -> androidx.activity.a:
androidx.activity.ComponentActivity -> androidx.activity.b:
    androidx.lifecycle.ViewModelStore getViewModelStore() -> a
androidx.activity.ComponentActivity$2 -> androidx.activity.ComponentActivity$2:
    androidx.activity.ComponentActivity this$0 -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.activity.ComponentActivity$3 -> androidx.activity.ComponentActivity$3:
    androidx.activity.ComponentActivity this$0 -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.activity.ImmLeaksCleaner -> androidx.activity.ImmLeaksCleaner:
    java.lang.reflect.Field sServedViewField -> d
    java.lang.reflect.Field sNextServedViewField -> e
    java.lang.reflect.Field sHField -> c
    int sReflectedFieldsInitialized -> b
    android.app.Activity mActivity -> a
    void initializeReflectiveFields() -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.activity.OnBackPressedCallback -> androidx.activity.c:
    void removeCancellable(androidx.activity.Cancellable) -> a
androidx.activity.OnBackPressedDispatcher -> androidx.activity.OnBackPressedDispatcher:
    androidx.activity.Cancellable addCancellableCallback(androidx.activity.OnBackPressedCallback) -> a
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable -> androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable:
    androidx.lifecycle.Lifecycle mLifecycle -> a
    androidx.activity.OnBackPressedCallback mOnBackPressedCallback -> b
    androidx.activity.OnBackPressedDispatcher this$0 -> d
    androidx.activity.Cancellable mCurrentCancellable -> c
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.activity.OnBackPressedDispatcherOwner -> androidx.activity.d:
androidx.arch.core.internal.FastSafeIterableMap -> a.a.a.a.a:
    java.util.HashMap mHashMap -> e
    androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object) -> a
androidx.arch.core.internal.SafeIterableMap -> a.a.a.a.b:
    androidx.arch.core.internal.SafeIterableMap$Entry mStart -> a
    androidx.arch.core.internal.SafeIterableMap$Entry mEnd -> b
    int mSize -> d
    java.util.WeakHashMap mIterators -> c
    java.util.Iterator descendingIterator() -> a
    androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object) -> a
    java.util.Map$Entry eldest() -> b
    androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions() -> c
    java.util.Map$Entry newest() -> d
androidx.arch.core.internal.SafeIterableMap$AscendingIterator -> a.a.a.a.b$a:
    androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry) -> b
    androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry) -> c
androidx.arch.core.internal.SafeIterableMap$DescendingIterator -> a.a.a.a.b$b:
    androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry) -> b
    androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry) -> c
androidx.arch.core.internal.SafeIterableMap$Entry -> a.a.a.a.b$c:
    androidx.arch.core.internal.SafeIterableMap$Entry mNext -> c
    androidx.arch.core.internal.SafeIterableMap$Entry mPrevious -> d
    java.lang.Object mValue -> b
    java.lang.Object mKey -> a
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions -> a.a.a.a.b$d:
    androidx.arch.core.internal.SafeIterableMap$Entry mCurrent -> a
    androidx.arch.core.internal.SafeIterableMap this$0 -> c
    boolean mBeforeStart -> b
    void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry) -> a
androidx.arch.core.internal.SafeIterableMap$ListIterator -> a.a.a.a.b$e:
    androidx.arch.core.internal.SafeIterableMap$Entry mExpectedEnd -> a
    androidx.arch.core.internal.SafeIterableMap$Entry mNext -> b
    androidx.arch.core.internal.SafeIterableMap$Entry nextNode() -> a
    void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry) -> a
    androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry) -> b
    androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry) -> c
androidx.arch.core.internal.SafeIterableMap$SupportRemove -> a.a.a.a.b$f:
    void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry) -> a
androidx.collection.ArrayMap -> a.b.a:
    androidx.collection.MapCollections mCollections -> h
    androidx.collection.MapCollections getCollection() -> b
androidx.collection.ArrayMap$1 -> a.b.a$a:
    androidx.collection.ArrayMap this$0 -> d
    void colClear() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    void colPut(java.lang.Object,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    java.util.Map colGetMap() -> b
    int colIndexOfValue(java.lang.Object) -> b
    int colGetSize() -> c
androidx.collection.ContainerHelpers -> a.b.b:
    java.lang.Object[] EMPTY_OBJECTS -> b
    int[] EMPTY_INTS -> a
    int binarySearch(int[],int,int) -> a
    boolean equal(java.lang.Object,java.lang.Object) -> a
androidx.collection.MapCollections -> a.b.c:
    androidx.collection.MapCollections$KeySet mKeySet -> b
    androidx.collection.MapCollections$ValuesCollection mValues -> c
    androidx.collection.MapCollections$EntrySet mEntrySet -> a
    void colClear() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    void colPut(java.lang.Object,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    boolean containsAllHelper(java.util.Map,java.util.Collection) -> a
    boolean equalsSetHelper(java.util.Set,java.lang.Object) -> a
    java.lang.Object[] toArrayHelper(java.lang.Object[],int) -> a
    java.util.Map colGetMap() -> b
    int colIndexOfValue(java.lang.Object) -> b
    boolean removeAllHelper(java.util.Map,java.util.Collection) -> b
    java.lang.Object[] toArrayHelper(int) -> b
    int colGetSize() -> c
    boolean retainAllHelper(java.util.Map,java.util.Collection) -> c
    java.util.Set getEntrySet() -> d
    java.util.Set getKeySet() -> e
    java.util.Collection getValues() -> f
androidx.collection.MapCollections$ArrayIterator -> a.b.c$a:
    androidx.collection.MapCollections this$0 -> e
    int mSize -> b
    int mIndex -> c
    int mOffset -> a
    boolean mCanRemove -> d
androidx.collection.MapCollections$EntrySet -> a.b.c$b:
    androidx.collection.MapCollections this$0 -> a
    boolean add(java.util.Map$Entry) -> a
androidx.collection.MapCollections$KeySet -> a.b.c$c:
    androidx.collection.MapCollections this$0 -> a
androidx.collection.MapCollections$MapIterator -> a.b.c$d:
    int mIndex -> b
    boolean mEntryValid -> c
    androidx.collection.MapCollections this$0 -> d
    int mEnd -> a
androidx.collection.MapCollections$ValuesCollection -> a.b.c$e:
    androidx.collection.MapCollections this$0 -> a
androidx.collection.SimpleArrayMap -> a.b.d:
    java.lang.Object[] mBaseCache -> d
    java.lang.Object[] mArray -> b
    int mTwiceBaseCacheSize -> g
    int mBaseCacheSize -> e
    int[] mHashes -> a
    int mSize -> c
    java.lang.Object[] mTwiceBaseCache -> f
    int binarySearchHashes(int[],int,int) -> a
    void ensureCapacity(int) -> a
    void freeArrays(int[],java.lang.Object[],int) -> a
    int indexOf(java.lang.Object,int) -> a
    int indexOfKey(java.lang.Object) -> a
    int indexOfNull() -> a
    java.lang.Object setValueAt(int,java.lang.Object) -> a
    int indexOfValue(java.lang.Object) -> b
    java.lang.Object keyAt(int) -> b
    java.lang.Object removeAt(int) -> c
    java.lang.Object valueAt(int) -> d
    void allocArrays(int) -> e
androidx.core.app.ComponentActivity -> androidx.core.app.a:
androidx.core.app.CoreComponentFactory -> androidx.core.app.CoreComponentFactory:
    java.lang.Object checkCompatWrapper(java.lang.Object) -> a
androidx.core.app.CoreComponentFactory$CompatWrapped -> androidx.core.app.CoreComponentFactory$a:
    java.lang.Object getWrapper() -> a
androidx.core.app.RemoteActionCompat -> androidx.core.app.RemoteActionCompat:
    androidx.core.graphics.drawable.IconCompat mIcon -> a
    java.lang.CharSequence mTitle -> b
    java.lang.CharSequence mContentDescription -> c
    boolean mEnabled -> e
    boolean mShouldShowIcon -> f
    android.app.PendingIntent mActionIntent -> d
androidx.core.graphics.drawable.IconCompat -> androidx.core.graphics.drawable.IconCompat:
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE -> j
    java.lang.String mTintModeStr -> i
    android.graphics.PorterDuff$Mode mTintMode -> h
    android.os.Parcelable mParcelable -> d
    java.lang.Object mObj1 -> b
    int mInt2 -> f
    android.content.res.ColorStateList mTintList -> g
    int mInt1 -> e
    byte[] mData -> c
    int mType -> a
    int getResId() -> a
    int getResId(android.graphics.drawable.Icon) -> a
    void onPreParceling(boolean) -> a
    java.lang.String typeToString(int) -> a
    java.lang.String getResPackage() -> b
    java.lang.String getResPackage(android.graphics.drawable.Icon) -> b
    void onPostParceling() -> c
androidx.core.view.KeyEventDispatcher$Component -> a.c.a.a:
androidx.fragment.app.Fragment -> androidx.fragment.app.a:
    android.view.View mView -> a
androidx.fragment.app.Fragment$2 -> androidx.fragment.app.Fragment$2:
    androidx.fragment.app.Fragment this$0 -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.ClassesInfoCache$CallbackInfo -> androidx.lifecycle.a:
    void invokeCallbacks(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object) -> a
androidx.lifecycle.CompositeGeneratedAdaptersObserver -> androidx.lifecycle.CompositeGeneratedAdaptersObserver:
    androidx.lifecycle.GeneratedAdapter[] mGeneratedAdapters -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.FullLifecycleObserver -> androidx.lifecycle.b:
    void onResume(androidx.lifecycle.LifecycleOwner) -> a
    void onPause(androidx.lifecycle.LifecycleOwner) -> b
    void onDestroy(androidx.lifecycle.LifecycleOwner) -> c
    void onStop(androidx.lifecycle.LifecycleOwner) -> d
    void onCreate(androidx.lifecycle.LifecycleOwner) -> e
    void onStart(androidx.lifecycle.LifecycleOwner) -> f
androidx.lifecycle.FullLifecycleObserverAdapter -> androidx.lifecycle.FullLifecycleObserverAdapter:
    androidx.lifecycle.FullLifecycleObserver mFullLifecycleObserver -> a
    androidx.lifecycle.LifecycleEventObserver mLifecycleEventObserver -> b
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.FullLifecycleObserverAdapter$1 -> androidx.lifecycle.FullLifecycleObserverAdapter$a:
    int[] $SwitchMap$androidx$lifecycle$Lifecycle$Event -> a
androidx.lifecycle.GeneratedAdapter -> androidx.lifecycle.c:
    void callMethods(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,boolean,androidx.lifecycle.MethodCallsLogger) -> a
androidx.lifecycle.GenericLifecycleObserver -> androidx.lifecycle.d:
androidx.lifecycle.Lifecycle -> androidx.lifecycle.e:
    androidx.lifecycle.Lifecycle$State getCurrentState() -> a
    void removeObserver(androidx.lifecycle.LifecycleObserver) -> a
androidx.lifecycle.Lifecycle$Event -> androidx.lifecycle.e$a:
androidx.lifecycle.Lifecycle$State -> androidx.lifecycle.e$b:
    androidx.lifecycle.Lifecycle$State INITIALIZED -> b
    androidx.lifecycle.Lifecycle$State DESTROYED -> a
    androidx.lifecycle.Lifecycle$State[] $VALUES -> f
    androidx.lifecycle.Lifecycle$State RESUMED -> e
    androidx.lifecycle.Lifecycle$State STARTED -> d
    androidx.lifecycle.Lifecycle$State CREATED -> c
    boolean isAtLeast(androidx.lifecycle.Lifecycle$State) -> a
androidx.lifecycle.LifecycleEventObserver -> androidx.lifecycle.f:
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.LifecycleObserver -> androidx.lifecycle.g:
androidx.lifecycle.LifecycleOwner -> androidx.lifecycle.h:
    androidx.lifecycle.Lifecycle getLifecycle() -> c
androidx.lifecycle.LifecycleRegistry -> androidx.lifecycle.i:
    androidx.lifecycle.Lifecycle$State mState -> b
    androidx.arch.core.internal.FastSafeIterableMap mObserverMap -> a
    boolean mHandlingEvent -> e
    java.util.ArrayList mParentStates -> g
    java.lang.ref.WeakReference mLifecycleOwner -> c
    boolean mNewEventOccurred -> f
    int mAddingObserverCounter -> d
    void backwardPass(androidx.lifecycle.LifecycleOwner) -> a
    androidx.lifecycle.Lifecycle$Event downEvent(androidx.lifecycle.Lifecycle$State) -> a
    androidx.lifecycle.Lifecycle$State getCurrentState() -> a
    void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event) -> a
    androidx.lifecycle.Lifecycle$State min(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State) -> a
    void removeObserver(androidx.lifecycle.LifecycleObserver) -> a
    void forwardPass(androidx.lifecycle.LifecycleOwner) -> b
    androidx.lifecycle.Lifecycle$State getStateAfter(androidx.lifecycle.Lifecycle$Event) -> b
    boolean isSynced() -> b
    void moveToState(androidx.lifecycle.Lifecycle$State) -> b
    void popParentState() -> c
    void pushParentState(androidx.lifecycle.Lifecycle$State) -> c
    void sync() -> d
    androidx.lifecycle.Lifecycle$Event upEvent(androidx.lifecycle.Lifecycle$State) -> d
androidx.lifecycle.LifecycleRegistry$1 -> androidx.lifecycle.i$a:
    int[] $SwitchMap$androidx$lifecycle$Lifecycle$State -> b
    int[] $SwitchMap$androidx$lifecycle$Lifecycle$Event -> a
androidx.lifecycle.LifecycleRegistry$ObserverWithState -> androidx.lifecycle.i$b:
    androidx.lifecycle.Lifecycle$State mState -> a
    androidx.lifecycle.LifecycleEventObserver mLifecycleObserver -> b
    void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.Lifecycling$1 -> androidx.lifecycle.Lifecycling$1:
    androidx.lifecycle.LifecycleEventObserver val$observer -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.LiveData -> androidx.lifecycle.LiveData:
    int mActiveCount -> a
    void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper) -> a
    void onActive() -> a
    void removeObserver(androidx.lifecycle.Observer) -> a
    void onInactive() -> b
androidx.lifecycle.LiveData$LifecycleBoundObserver -> androidx.lifecycle.LiveData$LifecycleBoundObserver:
    androidx.lifecycle.LiveData this$0 -> e
    androidx.lifecycle.LifecycleOwner mOwner -> d
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
    boolean shouldBeActive() -> a
androidx.lifecycle.LiveData$ObserverWrapper -> androidx.lifecycle.LiveData$a:
    androidx.lifecycle.LiveData this$0 -> c
    androidx.lifecycle.Observer mObserver -> a
    boolean mActive -> b
    void activeStateChanged(boolean) -> a
androidx.lifecycle.MethodCallsLogger -> androidx.lifecycle.j:
androidx.lifecycle.Observer -> androidx.lifecycle.k:
androidx.lifecycle.ReflectiveGenericLifecycleObserver -> androidx.lifecycle.ReflectiveGenericLifecycleObserver:
    androidx.lifecycle.ClassesInfoCache$CallbackInfo mInfo -> b
    java.lang.Object mWrapped -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.SingleGeneratedAdapterObserver -> androidx.lifecycle.SingleGeneratedAdapterObserver:
    androidx.lifecycle.GeneratedAdapter mGeneratedAdapter -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.ViewModelStore -> androidx.lifecycle.l:
androidx.lifecycle.ViewModelStoreOwner -> androidx.lifecycle.m:
androidx.savedstate.Recreator -> androidx.savedstate.Recreator:
    androidx.savedstate.SavedStateRegistryOwner mOwner -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.savedstate.SavedStateRegistry -> androidx.savedstate.a:
    boolean mAllowingSavingState -> a
    android.os.Bundle consumeRestoredStateForKey(java.lang.String) -> a
androidx.savedstate.SavedStateRegistry$1 -> androidx.savedstate.SavedStateRegistry$1:
    androidx.savedstate.SavedStateRegistry this$0 -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.savedstate.SavedStateRegistryOwner -> androidx.savedstate.b:
    androidx.savedstate.SavedStateRegistry getSavedStateRegistry() -> g
androidx.versionedparcelable.ParcelImpl -> androidx.versionedparcelable.ParcelImpl:
    androidx.versionedparcelable.VersionedParcelable mParcel -> a
androidx.versionedparcelable.ParcelImpl$1 -> androidx.versionedparcelable.ParcelImpl$a:
androidx.versionedparcelable.VersionedParcel -> androidx.versionedparcelable.a:
    androidx.collection.ArrayMap mParcelizerCache -> c
    androidx.collection.ArrayMap mReadCache -> a
    androidx.collection.ArrayMap mWriteCache -> b
    void closeField() -> a
    java.lang.Class findParcelClass(java.lang.Class) -> a
    boolean readBoolean(boolean,int) -> a
    byte[] readByteArray(byte[],int) -> a
    java.lang.CharSequence readCharSequence(java.lang.CharSequence,int) -> a
    boolean readField(int) -> a
    androidx.versionedparcelable.VersionedParcelable readFromParcel(java.lang.String,androidx.versionedparcelable.VersionedParcel) -> a
    int readInt(int,int) -> a
    android.os.Parcelable readParcelable(android.os.Parcelable,int) -> a
    java.lang.String readString(java.lang.String,int) -> a
    androidx.versionedparcelable.VersionedParcelable readVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int) -> a
    void setSerializationFlags(boolean,boolean) -> a
    void writeBoolean(boolean) -> a
    void writeByteArray(byte[]) -> a
    void writeCharSequence(java.lang.CharSequence) -> a
    void writeParcelable(android.os.Parcelable) -> a
    void writeString(java.lang.String) -> a
    void writeToParcel(androidx.versionedparcelable.VersionedParcelable,androidx.versionedparcelable.VersionedParcel) -> a
    void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable) -> a
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> b
    java.lang.reflect.Method getReadMethod(java.lang.String) -> b
    java.lang.reflect.Method getWriteMethod(java.lang.Class) -> b
    void setOutputField(int) -> b
    void writeBoolean(boolean,int) -> b
    void writeByteArray(byte[],int) -> b
    void writeCharSequence(java.lang.CharSequence,int) -> b
    void writeInt(int,int) -> b
    void writeParcelable(android.os.Parcelable,int) -> b
    void writeString(java.lang.String,int) -> b
    void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int) -> b
    void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable) -> b
    boolean isStream() -> c
    void writeInt(int) -> c
    boolean readBoolean() -> d
    byte[] readByteArray() -> e
    java.lang.CharSequence readCharSequence() -> f
    int readInt() -> g
    android.os.Parcelable readParcelable() -> h
    java.lang.String readString() -> i
    androidx.versionedparcelable.VersionedParcelable readVersionedParcelable() -> j
androidx.versionedparcelable.VersionedParcelParcel -> androidx.versionedparcelable.b:
    android.util.SparseIntArray mPositionLookup -> d
    java.lang.String mPrefix -> h
    int mNextRead -> j
    android.os.Parcel mParcel -> e
    int mFieldId -> k
    int mCurrentField -> i
    int mOffset -> f
    int mEnd -> g
    void closeField() -> a
    boolean readField(int) -> a
    void writeBoolean(boolean) -> a
    void writeByteArray(byte[]) -> a
    void writeCharSequence(java.lang.CharSequence) -> a
    void writeParcelable(android.os.Parcelable) -> a
    void writeString(java.lang.String) -> a
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> b
    void setOutputField(int) -> b
    void writeInt(int) -> c
    boolean readBoolean() -> d
    byte[] readByteArray() -> e
    java.lang.CharSequence readCharSequence() -> f
    int readInt() -> g
    android.os.Parcelable readParcelable() -> h
    java.lang.String readString() -> i
androidx.versionedparcelable.VersionedParcelable -> androidx.versionedparcelable.c:
com.aloisdeniel.flutter.appcenter.AppcenterPlugin -> b.a.a.a.a:
    io.flutter.plugin.common.PluginRegistry$Registrar registrar -> a
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
    void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar) -> a
com.aloisdeniel.flutter.appcenter.AppcenterPlugin$1 -> b.a.a.a.a$a:
    io.flutter.plugin.common.MethodChannel$Result val$result -> a
    void accept(java.lang.Object) -> a
    void accept(java.util.UUID) -> a
com.aloisdeniel.flutter.appcenter.AppcenterPlugin$2 -> b.a.a.a.a$b:
    io.flutter.plugin.common.MethodChannel$Result val$result -> a
    void accept(java.lang.Boolean) -> a
    void accept(java.lang.Object) -> a
com.aloisdeniel.flutter.appcenter.AppcenterPlugin$3 -> b.a.a.a.a$c:
    io.flutter.plugin.common.MethodChannel$Result val$result -> a
    void accept(java.lang.Object) -> a
    void accept(java.lang.Void) -> a
com.aloisdeniel.flutter.appcenter_analytics.AppcenterAnalyticsPlugin -> b.a.a.b.a:
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
    void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar) -> a
com.aloisdeniel.flutter.appcenter_analytics.AppcenterAnalyticsPlugin$1 -> b.a.a.b.a$a:
    io.flutter.plugin.common.MethodChannel$Result val$result -> a
    void accept(java.lang.Boolean) -> a
    void accept(java.lang.Object) -> a
com.aloisdeniel.flutter.appcenter_analytics.AppcenterAnalyticsPlugin$2 -> b.a.a.b.a$b:
    io.flutter.plugin.common.MethodChannel$Result val$result -> a
    void accept(java.lang.Object) -> a
    void accept(java.lang.Void) -> a
com.aloisdeniel.flutter.appcenter_crashes.AppcenterCrashesPlugin -> b.a.a.c.a:
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
    void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar) -> a
com.aloisdeniel.flutter.appcenter_crashes.AppcenterCrashesPlugin$1 -> b.a.a.c.a$a:
    io.flutter.plugin.common.MethodChannel$Result val$result -> a
    void accept(java.lang.Boolean) -> a
    void accept(java.lang.Object) -> a
com.aloisdeniel.flutter.appcenter_crashes.AppcenterCrashesPlugin$2 -> b.a.a.c.a$b:
    io.flutter.plugin.common.MethodChannel$Result val$result -> a
    void accept(java.lang.Object) -> a
    void accept(java.lang.Void) -> a
com.microsoft.appcenter.AbstractAppCenterService -> b.b.a.a:
    com.microsoft.appcenter.AppCenterHandler mHandler -> b
    com.microsoft.appcenter.channel.Channel mChannel -> a
    void onConfigurationUpdated(java.lang.String,java.lang.String) -> a
    void onStarted(android.content.Context,com.microsoft.appcenter.channel.Channel,java.lang.String,java.lang.String,boolean) -> a
    void onStarting(com.microsoft.appcenter.AppCenterHandler) -> a
    void post(java.lang.Runnable) -> a
    boolean post(java.lang.Runnable,java.lang.Runnable,java.lang.Runnable) -> a
    void postAsyncGetter(java.lang.Runnable,com.microsoft.appcenter.utils.async.DefaultAppCenterFuture,java.lang.Object) -> a
    void setInstanceEnabled(boolean) -> a
    void applyEnabledState(boolean) -> b
    boolean isInstanceEnabled() -> c
    com.microsoft.appcenter.utils.async.AppCenterFuture setInstanceEnabledAsync(boolean) -> c
    boolean isAppSecretRequired() -> d
    void onApplicationEnterForeground() -> e
    void onApplicationEnterBackground() -> f
    com.microsoft.appcenter.channel.Channel$GroupListener getChannelListener() -> g
    java.lang.String getEnabledPreferenceKey() -> h
    java.lang.String getGroupName() -> i
    java.lang.String getLoggerTag() -> j
    int getTriggerCount() -> k
    long getTriggerInterval() -> l
    int getTriggerMaxParallelRequests() -> m
    com.microsoft.appcenter.utils.async.AppCenterFuture isInstanceEnabledAsync() -> n
com.microsoft.appcenter.AbstractAppCenterService$1 -> b.b.a.a$a:
    com.microsoft.appcenter.utils.async.DefaultAppCenterFuture val$future -> a
com.microsoft.appcenter.AbstractAppCenterService$2 -> b.b.a.a$b:
    com.microsoft.appcenter.utils.async.DefaultAppCenterFuture val$future -> a
com.microsoft.appcenter.AbstractAppCenterService$3 -> b.b.a.a$c:
    com.microsoft.appcenter.utils.async.DefaultAppCenterFuture val$future -> b
    com.microsoft.appcenter.AbstractAppCenterService this$0 -> c
    boolean val$enabled -> a
com.microsoft.appcenter.AbstractAppCenterService$4 -> b.b.a.a$d:
    java.lang.Runnable val$serviceDisabledRunnable -> b
    com.microsoft.appcenter.AbstractAppCenterService this$0 -> c
    java.lang.Runnable val$runnable -> a
com.microsoft.appcenter.AbstractAppCenterService$5 -> b.b.a.a$e:
    com.microsoft.appcenter.utils.async.DefaultAppCenterFuture val$future -> a
    java.lang.Object val$valueIfDisabledOrNotStarted -> b
com.microsoft.appcenter.AbstractAppCenterService$6 -> b.b.a.a$f:
    java.lang.Runnable val$runnable -> a
com.microsoft.appcenter.AppCenter -> b.b.a.b:
    java.lang.String mTransmissionTargetToken -> f
    com.microsoft.appcenter.utils.async.DefaultAppCenterFuture mSetMaxStorageSizeFuture -> r
    com.microsoft.appcenter.AppCenter sInstance -> t
    android.os.HandlerThread mHandlerThread -> n
    com.microsoft.appcenter.utils.ApplicationLifecycleListener mApplicationLifecycleListener -> d
    com.microsoft.appcenter.ingestion.models.json.LogSerializer mLogSerializer -> l
    com.microsoft.appcenter.channel.OneCollectorChannelListener mOneCollectorChannelListener -> s
    android.app.Application mApplication -> c
    java.util.Set mServices -> j
    com.microsoft.appcenter.AppCenterHandler mAppCenterHandler -> p
    com.microsoft.appcenter.UncaughtExceptionHandler mUncaughtExceptionHandler -> h
    android.os.Handler mHandler -> o
    java.util.List mStartedServicesNamesToLog -> i
    com.microsoft.appcenter.channel.Channel mChannel -> m
    long mMaxStorageSizeInBytes -> q
    boolean mConfiguredFromApp -> g
    boolean mLogLevelConfigured -> a
    java.util.Set mServicesStartedFromLibrary -> k
    java.lang.String mLogUrl -> b
    java.lang.String mAppSecret -> e
    com.microsoft.appcenter.channel.Channel access$000(com.microsoft.appcenter.AppCenter) -> a
    void access$500(com.microsoft.appcenter.AppCenter,java.lang.Runnable,java.lang.Runnable) -> a
    void access$600(com.microsoft.appcenter.AppCenter,boolean) -> a
    void access$700(com.microsoft.appcenter.AppCenter,java.lang.Iterable,java.lang.Iterable,boolean) -> a
    void configure(android.app.Application,java.lang.String) -> a
    void configureAndStartServices(android.app.Application,java.lang.String,boolean,java.lang.Class[]) -> a
    void configureAndStartServices(android.app.Application,java.lang.String,java.lang.Class[]) -> a
    boolean configureInstance(android.app.Application,java.lang.String,boolean) -> a
    boolean configureSecretString(java.lang.String) -> a
    void finishConfiguration(boolean) -> a
    void finishStartServices(java.lang.Iterable,java.lang.Iterable,boolean) -> a
    void handlerAppCenterOperation(java.lang.Runnable,java.lang.Runnable) -> a
    boolean isInstanceEnabled() -> a
    void startOrUpdateService(com.microsoft.appcenter.AppCenterService,java.util.Collection,java.util.Collection,boolean) -> a
    void startOrUpdateServiceFromApp(com.microsoft.appcenter.AppCenterService,java.util.Collection,java.util.Collection) -> a
    boolean startService(com.microsoft.appcenter.AppCenterService,java.util.Collection) -> a
    void startServices(boolean,java.lang.Class[]) -> a
    java.lang.String access$100(com.microsoft.appcenter.AppCenter) -> b
    void access$800(com.microsoft.appcenter.AppCenter,boolean) -> b
    void applyStorageMaxSize() -> b
    void configureInstanceWithRequiredAppSecret(android.app.Application,java.lang.String) -> b
    com.microsoft.appcenter.utils.async.AppCenterFuture setEnabled(boolean) -> b
    void start(android.app.Application,java.lang.String,java.lang.Class[]) -> b
    void startServiceFromLibrary(com.microsoft.appcenter.AppCenterService,java.util.Collection) -> b
    void access$400(com.microsoft.appcenter.AppCenter) -> c
    boolean checkPrecondition() -> c
    void setInstanceEnabled(boolean) -> c
    com.microsoft.appcenter.utils.async.AppCenterFuture getInstallId() -> d
    com.microsoft.appcenter.utils.async.AppCenterFuture setInstanceEnabledAsync(boolean) -> d
    com.microsoft.appcenter.AppCenter getInstance() -> e
    com.microsoft.appcenter.utils.async.AppCenterFuture getInstanceInstallIdAsync() -> f
    com.microsoft.appcenter.utils.async.AppCenterFuture isEnabled() -> g
    boolean isInstanceConfigured() -> h
    com.microsoft.appcenter.utils.async.AppCenterFuture isInstanceEnabledAsync() -> i
    void sendStartServiceLog() -> j
com.microsoft.appcenter.AppCenter$10 -> b.b.a.b$a:
    com.microsoft.appcenter.utils.async.DefaultAppCenterFuture val$future -> a
com.microsoft.appcenter.AppCenter$11 -> b.b.a.b$b:
    com.microsoft.appcenter.AppCenter this$0 -> c
    com.microsoft.appcenter.utils.async.DefaultAppCenterFuture val$future -> b
    boolean val$enabled -> a
com.microsoft.appcenter.AppCenter$12 -> b.b.a.b$c:
    com.microsoft.appcenter.utils.async.DefaultAppCenterFuture val$future -> a
com.microsoft.appcenter.AppCenter$13 -> b.b.a.b$d:
    com.microsoft.appcenter.utils.async.DefaultAppCenterFuture val$future -> a
com.microsoft.appcenter.AppCenter$4 -> b.b.a.b$e:
    com.microsoft.appcenter.AppCenter this$0 -> a
com.microsoft.appcenter.AppCenter$5 -> b.b.a.b$f:
    com.microsoft.appcenter.AppCenter this$0 -> a
    void post(java.lang.Runnable,java.lang.Runnable) -> a
com.microsoft.appcenter.AppCenter$6 -> b.b.a.b$g:
    com.microsoft.appcenter.AppCenter this$0 -> b
    boolean val$configureFromApp -> a
com.microsoft.appcenter.AppCenter$7 -> b.b.a.b$h:
    com.microsoft.appcenter.AppCenter this$0 -> c
    java.lang.Runnable val$disabledRunnable -> b
    java.lang.Runnable val$runnable -> a
com.microsoft.appcenter.AppCenter$8 -> b.b.a.b$i:
    com.microsoft.appcenter.AppCenter this$0 -> d
    java.util.Collection val$updatedServices -> a
    java.util.Collection val$startedServices -> b
    boolean val$startFromApp -> c
com.microsoft.appcenter.AppCenter$9 -> b.b.a.b$j:
    com.microsoft.appcenter.utils.async.DefaultAppCenterFuture val$future -> a
com.microsoft.appcenter.AppCenterHandler -> b.b.a.c:
    void post(java.lang.Runnable,java.lang.Runnable) -> a
com.microsoft.appcenter.AppCenterService -> b.b.a.d:
    java.util.Map getLogFactories() -> a
    void onConfigurationUpdated(java.lang.String,java.lang.String) -> a
    void onStarted(android.content.Context,com.microsoft.appcenter.channel.Channel,java.lang.String,java.lang.String,boolean) -> a
    void onStarting(com.microsoft.appcenter.AppCenterHandler) -> a
    void setInstanceEnabled(boolean) -> a
    java.lang.String getServiceName() -> b
    boolean isInstanceEnabled() -> c
    boolean isAppSecretRequired() -> d
com.microsoft.appcenter.CancellationException -> b.b.a.e:
com.microsoft.appcenter.Constants -> b.b.a.f:
    java.lang.String FILES_PATH -> a
    boolean APPLICATION_DEBUGGABLE -> b
    void loadFilesPath(android.content.Context) -> a
    void loadFromContext(android.content.Context) -> b
    void setDebuggableFlag(android.content.Context) -> c
com.microsoft.appcenter.DependencyConfiguration -> b.b.a.g:
    com.microsoft.appcenter.http.HttpClient sHttpClient -> a
    com.microsoft.appcenter.http.HttpClient getHttpClient() -> a
com.microsoft.appcenter.Flags -> b.b.a.h:
    int getPersistenceFlag(int,boolean) -> a
com.microsoft.appcenter.ServiceInstrumentationUtils -> b.b.a.i:
    boolean isServiceDisabledByInstrumentation(java.lang.String) -> a
com.microsoft.appcenter.UncaughtExceptionHandler -> b.b.a.j:
    java.lang.Thread$UncaughtExceptionHandler mDefaultUncaughtExceptionHandler -> c
    android.os.Handler mHandler -> a
    com.microsoft.appcenter.channel.Channel mChannel -> b
    com.microsoft.appcenter.channel.Channel access$000(com.microsoft.appcenter.UncaughtExceptionHandler) -> a
    void register() -> a
    void unregister() -> b
com.microsoft.appcenter.UncaughtExceptionHandler$1 -> b.b.a.j$a:
    java.util.concurrent.Semaphore val$semaphore -> a
    com.microsoft.appcenter.UncaughtExceptionHandler this$0 -> b
com.microsoft.appcenter.analytics.Analytics -> com.microsoft.appcenter.analytics.Analytics:
    boolean mAutoPageTrackingEnabled -> m
    java.util.Map mFactories -> c
    com.microsoft.appcenter.analytics.channel.AnalyticsListener mAnalyticsListener -> k
    long mTransmissionInterval -> l
    java.lang.ref.WeakReference mCurrentActivity -> e
    boolean mStartedFromApp -> g
    com.microsoft.appcenter.analytics.channel.SessionTracker mSessionTracker -> h
    com.microsoft.appcenter.analytics.channel.AnalyticsValidator mAnalyticsValidator -> i
    com.microsoft.appcenter.channel.Channel$Listener mAnalyticsTransmissionTargetListener -> j
    com.microsoft.appcenter.analytics.Analytics sInstance -> n
    com.microsoft.appcenter.analytics.AnalyticsTransmissionTarget mDefaultTransmissionTarget -> d
    android.content.Context mContext -> f
    android.content.Context access$000(com.microsoft.appcenter.analytics.Analytics) -> a
    java.lang.ref.WeakReference access$202(com.microsoft.appcenter.analytics.Analytics,java.lang.ref.WeakReference) -> a
    void access$300(com.microsoft.appcenter.analytics.Analytics,android.app.Activity) -> a
    java.util.List convertProperties(java.util.Map) -> a
    com.microsoft.appcenter.analytics.AnalyticsTransmissionTarget createAnalyticsTransmissionTarget(java.lang.String) -> a
    java.lang.String generatePageName(java.lang.Class) -> a
    java.util.Map getLogFactories() -> a
    void onConfigurationUpdated(java.lang.String,java.lang.String) -> a
    void onStarted(android.content.Context,com.microsoft.appcenter.channel.Channel,java.lang.String,java.lang.String,boolean) -> a
    void post(java.lang.Runnable) -> a
    void processOnResume(android.app.Activity) -> a
    void queuePage(java.lang.String,java.util.Map) -> a
    void trackEventAsync(java.lang.String,java.util.List,com.microsoft.appcenter.analytics.AnalyticsTransmissionTarget,int) -> a
    com.microsoft.appcenter.channel.Channel access$100(com.microsoft.appcenter.analytics.Analytics) -> b
    void applyEnabledState(boolean) -> b
    java.lang.String getServiceName() -> b
    void postCommandEvenIfDisabled(java.lang.Runnable) -> b
    void setDefaultTransmissionTarget(java.lang.String) -> b
    void trackEvent(java.lang.String,java.util.Map) -> b
    com.microsoft.appcenter.analytics.channel.SessionTracker access$400(com.microsoft.appcenter.analytics.Analytics) -> c
    com.microsoft.appcenter.analytics.channel.AnalyticsListener access$500(com.microsoft.appcenter.analytics.Analytics) -> d
    boolean isAppSecretRequired() -> d
    com.microsoft.appcenter.utils.async.AppCenterFuture setEnabled(boolean) -> d
    boolean access$600(com.microsoft.appcenter.analytics.Analytics) -> e
    com.microsoft.appcenter.channel.Channel access$800(com.microsoft.appcenter.analytics.Analytics) -> f
    com.microsoft.appcenter.channel.Channel$GroupListener getChannelListener() -> g
    java.lang.String getGroupName() -> i
    java.lang.String getLoggerTag() -> j
    long getTriggerInterval() -> l
    java.lang.String getEnabledPreferenceKeyPrefix() -> o
    com.microsoft.appcenter.utils.async.AppCenterFuture isEnabled() -> p
    void startAppLevelFeatures() -> q
com.microsoft.appcenter.analytics.Analytics$1 -> com.microsoft.appcenter.analytics.Analytics$a:
    com.microsoft.appcenter.analytics.Analytics this$0 -> b
    com.microsoft.appcenter.analytics.AnalyticsTransmissionTarget val$transmissionTarget -> a
com.microsoft.appcenter.analytics.Analytics$2 -> com.microsoft.appcenter.analytics.Analytics$b:
    com.microsoft.appcenter.analytics.Analytics this$0 -> b
    android.app.Activity val$activity -> a
com.microsoft.appcenter.analytics.Analytics$3 -> com.microsoft.appcenter.analytics.Analytics$c:
    com.microsoft.appcenter.analytics.Analytics this$0 -> c
    java.lang.Runnable val$updateCurrentActivityRunnable -> a
    android.app.Activity val$activity -> b
com.microsoft.appcenter.analytics.Analytics$4 -> com.microsoft.appcenter.analytics.Analytics$d:
    com.microsoft.appcenter.analytics.Analytics this$0 -> a
com.microsoft.appcenter.analytics.Analytics$5 -> com.microsoft.appcenter.analytics.Analytics$e:
    com.microsoft.appcenter.analytics.Analytics this$0 -> b
    java.lang.Runnable val$updateCurrentActivityRunnable -> a
com.microsoft.appcenter.analytics.Analytics$6 -> com.microsoft.appcenter.analytics.Analytics$f:
    com.microsoft.appcenter.analytics.Analytics this$0 -> a
    void onBeforeSending(com.microsoft.appcenter.ingestion.models.Log) -> a
    void onFailure(com.microsoft.appcenter.ingestion.models.Log,java.lang.Exception) -> a
    void onSuccess(com.microsoft.appcenter.ingestion.models.Log) -> b
com.microsoft.appcenter.analytics.Analytics$8 -> com.microsoft.appcenter.analytics.Analytics$g:
    com.microsoft.appcenter.analytics.Analytics this$0 -> f
    java.util.List val$properties -> d
    com.microsoft.appcenter.analytics.AnalyticsTransmissionTarget val$transmissionTarget -> a
    int val$flags -> e
    java.lang.String val$name -> c
    java.lang.String val$userId -> b
com.microsoft.appcenter.analytics.AnalyticsTransmissionTarget -> com.microsoft.appcenter.analytics.a:
    com.microsoft.appcenter.analytics.AuthenticationProvider sAuthenticationProvider -> e
    com.microsoft.appcenter.analytics.PropertyConfigurator mPropertyConfigurator -> c
    java.lang.String mTransmissionTargetToken -> a
    com.microsoft.appcenter.analytics.AnalyticsTransmissionTarget mParentTarget -> b
    android.content.Context mContext -> d
    void access$600(com.microsoft.appcenter.ingestion.models.Log) -> a
    com.microsoft.appcenter.analytics.PropertyConfigurator getPropertyConfigurator() -> a
    void initInBackground(android.content.Context,com.microsoft.appcenter.channel.Channel) -> a
    void addTicketToLog(com.microsoft.appcenter.ingestion.models.Log) -> b
    java.lang.String getTransmissionTargetToken() -> b
    boolean isEnabled() -> c
    boolean areAncestorsEnabled() -> d
    com.microsoft.appcenter.channel.Channel$Listener getChannelListener() -> e
    java.lang.String getEnabledPreferenceKey() -> f
    boolean isEnabledInStorage() -> g
com.microsoft.appcenter.analytics.AnalyticsTransmissionTarget$7 -> com.microsoft.appcenter.analytics.a$a:
    void onPreparingLog(com.microsoft.appcenter.ingestion.models.Log,java.lang.String) -> a
com.microsoft.appcenter.analytics.AuthenticationProvider -> com.microsoft.appcenter.analytics.b:
    java.lang.String getTicketKeyHash() -> a
com.microsoft.appcenter.analytics.EventProperties -> com.microsoft.appcenter.analytics.c:
com.microsoft.appcenter.analytics.PropertyConfigurator -> com.microsoft.appcenter.analytics.d:
    boolean mDeviceIdEnabled -> e
    java.lang.String mAppName -> a
    java.lang.String mAppLocale -> c
    java.lang.String mAppVersion -> b
    java.lang.String mUserId -> d
    com.microsoft.appcenter.analytics.AnalyticsTransmissionTarget mTransmissionTarget -> f
    java.lang.String getAppLocale() -> a
    void onPreparingLog(com.microsoft.appcenter.ingestion.models.Log,java.lang.String) -> a
    java.lang.String getAppName() -> b
    boolean shouldOverridePartAProperties(com.microsoft.appcenter.ingestion.models.Log) -> b
    java.lang.String getAppVersion() -> c
    java.lang.String getUserId() -> d
com.microsoft.appcenter.analytics.channel.AnalyticsListener -> com.microsoft.appcenter.analytics.e.a:
    void onBeforeSending(com.microsoft.appcenter.ingestion.models.Log) -> a
    void onSendingFailed(com.microsoft.appcenter.ingestion.models.Log,java.lang.Exception) -> a
    void onSendingSucceeded(com.microsoft.appcenter.ingestion.models.Log) -> b
com.microsoft.appcenter.analytics.channel.AnalyticsValidator -> com.microsoft.appcenter.analytics.e.b:
    com.microsoft.appcenter.ingestion.models.properties.TypedProperty copyProperty(com.microsoft.appcenter.ingestion.models.properties.TypedProperty,java.lang.String) -> a
    boolean shouldFilter(com.microsoft.appcenter.ingestion.models.Log) -> a
    boolean validateLog(com.microsoft.appcenter.analytics.ingestion.models.EventLog) -> a
    boolean validateLog(com.microsoft.appcenter.analytics.ingestion.models.LogWithNameAndProperties) -> a
    java.lang.String validateName(java.lang.String,java.lang.String) -> a
    java.util.Map validateProperties(java.util.Map,java.lang.String,java.lang.String) -> a
    void validateProperties(java.util.List) -> a
com.microsoft.appcenter.analytics.channel.SessionTracker -> com.microsoft.appcenter.analytics.e.c:
    java.util.UUID mSid -> c
    long mLastQueuedLogTime -> d
    com.microsoft.appcenter.channel.Channel mChannel -> a
    java.lang.String mGroupName -> b
    java.lang.Long mLastResumedTime -> e
    java.lang.Long mLastPausedTime -> f
    void clearSessions() -> a
    void onPreparingLog(com.microsoft.appcenter.ingestion.models.Log,java.lang.String) -> a
    void onActivityPaused() -> b
    void onActivityResumed() -> c
    boolean hasSessionTimedOut() -> d
    void sendStartSessionIfNeeded() -> e
com.microsoft.appcenter.analytics.ingestion.models.EventLog -> com.microsoft.appcenter.analytics.f.a.a:
    java.util.UUID id -> j
    java.util.List typedProperties -> k
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void setTypedProperties(java.util.List) -> a
    void write(org.json.JSONStringer) -> a
    void setId(java.util.UUID) -> b
    java.util.UUID getId() -> k
    java.util.List getTypedProperties() -> l
com.microsoft.appcenter.analytics.ingestion.models.LogWithNameAndProperties -> com.microsoft.appcenter.analytics.f.a.b:
    java.lang.String name -> i
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    void setName(java.lang.String) -> d
    java.lang.String getName() -> j
com.microsoft.appcenter.analytics.ingestion.models.PageLog -> com.microsoft.appcenter.analytics.f.a.c:
    java.lang.String getType() -> a
com.microsoft.appcenter.analytics.ingestion.models.StartSessionLog -> com.microsoft.appcenter.analytics.f.a.d:
    java.lang.String getType() -> a
com.microsoft.appcenter.analytics.ingestion.models.json.EventLogFactory -> com.microsoft.appcenter.analytics.f.a.e.a:
    com.microsoft.appcenter.analytics.ingestion.models.EventLog create() -> a
    com.microsoft.appcenter.ingestion.models.Log create() -> a
    java.util.Collection toCommonSchemaLogs(com.microsoft.appcenter.ingestion.models.Log) -> a
com.microsoft.appcenter.analytics.ingestion.models.json.PageLogFactory -> com.microsoft.appcenter.analytics.f.a.e.b:
    com.microsoft.appcenter.analytics.ingestion.models.PageLog create() -> a
    com.microsoft.appcenter.ingestion.models.Log create() -> a
com.microsoft.appcenter.analytics.ingestion.models.json.StartSessionLogFactory -> com.microsoft.appcenter.analytics.f.a.e.c:
    com.microsoft.appcenter.analytics.ingestion.models.StartSessionLog create() -> a
    com.microsoft.appcenter.ingestion.models.Log create() -> a
com.microsoft.appcenter.analytics.ingestion.models.one.CommonSchemaEventLog -> com.microsoft.appcenter.analytics.f.a.f.a:
    java.lang.String getType() -> a
com.microsoft.appcenter.analytics.ingestion.models.one.json.CommonSchemaEventLogFactory -> com.microsoft.appcenter.analytics.f.a.f.b.a:
    com.microsoft.appcenter.analytics.ingestion.models.one.CommonSchemaEventLog create() -> a
    com.microsoft.appcenter.ingestion.models.Log create() -> a
com.microsoft.appcenter.channel.AbstractChannelListener -> b.b.a.k.a:
    void onGloballyEnabled(boolean) -> a
    void onGroupAdded(java.lang.String,com.microsoft.appcenter.channel.Channel$GroupListener,long) -> a
    void onGroupRemoved(java.lang.String) -> a
    void onPreparedLog(com.microsoft.appcenter.ingestion.models.Log,java.lang.String,int) -> a
    void onPreparingLog(com.microsoft.appcenter.ingestion.models.Log,java.lang.String) -> a
    boolean shouldFilter(com.microsoft.appcenter.ingestion.models.Log) -> a
    void onClear(java.lang.String) -> b
com.microsoft.appcenter.channel.Channel -> b.b.a.k.b:
    void addGroup(java.lang.String,int,long,int,com.microsoft.appcenter.ingestion.Ingestion,com.microsoft.appcenter.channel.Channel$GroupListener) -> a
    void enqueue(com.microsoft.appcenter.ingestion.models.Log,java.lang.String,int) -> a
    void removeListener(com.microsoft.appcenter.channel.Channel$Listener) -> a
    void setEnabled(boolean) -> a
    void setLogUrl(java.lang.String) -> a
    boolean setMaxStorageSize(long) -> a
    void shutdown() -> a
    void addListener(com.microsoft.appcenter.channel.Channel$Listener) -> b
    void setAppSecret(java.lang.String) -> b
    void removeGroup(java.lang.String) -> c
    void clear(java.lang.String) -> d
com.microsoft.appcenter.channel.Channel$GroupListener -> b.b.a.k.b$a:
    void onBeforeSending(com.microsoft.appcenter.ingestion.models.Log) -> a
    void onFailure(com.microsoft.appcenter.ingestion.models.Log,java.lang.Exception) -> a
    void onSuccess(com.microsoft.appcenter.ingestion.models.Log) -> b
com.microsoft.appcenter.channel.Channel$Listener -> b.b.a.k.b$b:
    void onGloballyEnabled(boolean) -> a
    void onGroupAdded(java.lang.String,com.microsoft.appcenter.channel.Channel$GroupListener,long) -> a
    void onGroupRemoved(java.lang.String) -> a
    void onPreparedLog(com.microsoft.appcenter.ingestion.models.Log,java.lang.String,int) -> a
    void onPreparingLog(com.microsoft.appcenter.ingestion.models.Log,java.lang.String) -> a
    boolean shouldFilter(com.microsoft.appcenter.ingestion.models.Log) -> a
    void onClear(java.lang.String) -> b
com.microsoft.appcenter.channel.DefaultChannel -> b.b.a.k.c:
    android.content.Context mContext -> a
    java.util.Collection mListeners -> e
    int mCurrentState -> m
    boolean mEnabled -> j
    boolean mDiscardLogs -> k
    com.microsoft.appcenter.ingestion.models.Device mDevice -> l
    java.util.UUID mInstallId -> c
    java.util.Set mIngestions -> h
    java.util.Map mGroupStates -> d
    com.microsoft.appcenter.persistence.Persistence mPersistence -> f
    com.microsoft.appcenter.ingestion.Ingestion mIngestion -> g
    java.lang.String mAppSecret -> b
    android.os.Handler mAppCenterHandler -> i
    void access$000(com.microsoft.appcenter.channel.DefaultChannel,com.microsoft.appcenter.channel.DefaultChannel$GroupState,java.lang.String) -> a
    android.os.Handler access$100(com.microsoft.appcenter.channel.DefaultChannel) -> a
    void access$200(com.microsoft.appcenter.channel.DefaultChannel,com.microsoft.appcenter.channel.DefaultChannel$GroupState,java.lang.String,java.lang.Exception) -> a
    void access$300(com.microsoft.appcenter.channel.DefaultChannel,com.microsoft.appcenter.channel.DefaultChannel$GroupState,int) -> a
    void access$400(com.microsoft.appcenter.channel.DefaultChannel,com.microsoft.appcenter.channel.DefaultChannel$GroupState) -> a
    void addGroup(java.lang.String,int,long,int,com.microsoft.appcenter.ingestion.Ingestion,com.microsoft.appcenter.channel.Channel$GroupListener) -> a
    com.microsoft.appcenter.persistence.Persistence buildDefaultPersistence(android.content.Context,com.microsoft.appcenter.ingestion.models.json.LogSerializer) -> a
    void cancelTimer(com.microsoft.appcenter.channel.DefaultChannel$GroupState) -> a
    void checkPendingLogsAfterPost(com.microsoft.appcenter.channel.DefaultChannel$GroupState,int) -> a
    void enqueue(com.microsoft.appcenter.ingestion.models.Log,java.lang.String,int) -> a
    void handleSendingFailure(com.microsoft.appcenter.channel.DefaultChannel$GroupState,java.lang.String,java.lang.Exception) -> a
    void handleSendingSuccess(com.microsoft.appcenter.channel.DefaultChannel$GroupState,java.lang.String) -> a
    void removeListener(com.microsoft.appcenter.channel.Channel$Listener) -> a
    void sendLogs(com.microsoft.appcenter.channel.DefaultChannel$GroupState,int,java.util.List,java.lang.String) -> a
    void setEnabled(boolean) -> a
    void setLogUrl(java.lang.String) -> a
    boolean setMaxStorageSize(long) -> a
    void shutdown() -> a
    void suspend(boolean,java.lang.Exception) -> a
    void addListener(com.microsoft.appcenter.channel.Channel$Listener) -> b
    void checkPendingLogs(com.microsoft.appcenter.channel.DefaultChannel$GroupState) -> b
    boolean checkStateDidNotChange(com.microsoft.appcenter.channel.DefaultChannel$GroupState,int) -> b
    void setAppSecret(java.lang.String) -> b
    void deleteLogsOnSuspended(com.microsoft.appcenter.channel.DefaultChannel$GroupState) -> c
    void removeGroup(java.lang.String) -> c
    void clear(java.lang.String) -> d
    java.lang.Long resolveCustomTriggerInterval(com.microsoft.appcenter.channel.DefaultChannel$GroupState) -> d
    java.lang.Long resolveDefaultTriggerInterval(com.microsoft.appcenter.channel.DefaultChannel$GroupState) -> e
    java.lang.Long resolveTriggerInterval(com.microsoft.appcenter.channel.DefaultChannel$GroupState) -> f
    void triggerIngestion(com.microsoft.appcenter.channel.DefaultChannel$GroupState) -> g
com.microsoft.appcenter.channel.DefaultChannel$1 -> b.b.a.k.c$a:
    com.microsoft.appcenter.channel.DefaultChannel this$0 -> c
    com.microsoft.appcenter.channel.DefaultChannel$GroupState val$groupState -> a
    java.lang.String val$batchId -> b
    void onCallFailed(java.lang.Exception) -> a
    void onCallSucceeded(com.microsoft.appcenter.http.HttpResponse) -> a
com.microsoft.appcenter.channel.DefaultChannel$1$1 -> b.b.a.k.c$a$a:
    com.microsoft.appcenter.channel.DefaultChannel$1 this$1 -> a
com.microsoft.appcenter.channel.DefaultChannel$1$2 -> b.b.a.k.c$a$b:
    com.microsoft.appcenter.channel.DefaultChannel$1 this$1 -> b
    java.lang.Exception val$e -> a
com.microsoft.appcenter.channel.DefaultChannel$2 -> b.b.a.k.c$b:
    com.microsoft.appcenter.channel.DefaultChannel this$0 -> c
    com.microsoft.appcenter.channel.DefaultChannel$GroupState val$groupState -> a
    int val$currentState -> b
com.microsoft.appcenter.channel.DefaultChannel$GroupState -> b.b.a.k.c$c:
    boolean mScheduled -> i
    boolean mPaused -> j
    int mPendingLogCount -> h
    int mMaxParallelBatches -> d
    java.util.Collection mPausedTargetKeys -> k
    long mBatchTimeInterval -> c
    int mMaxLogsPerBatch -> b
    com.microsoft.appcenter.channel.Channel$GroupListener mListener -> g
    java.lang.Runnable mRunnable -> l
    java.lang.String mName -> a
    com.microsoft.appcenter.channel.DefaultChannel this$0 -> m
    java.util.Map mSendingBatches -> e
    com.microsoft.appcenter.ingestion.Ingestion mIngestion -> f
com.microsoft.appcenter.channel.DefaultChannel$GroupState$1 -> b.b.a.k.c$c$a:
    com.microsoft.appcenter.channel.DefaultChannel$GroupState this$1 -> a
com.microsoft.appcenter.channel.OneCollectorChannelListener -> b.b.a.k.d:
    com.microsoft.appcenter.ingestion.models.json.LogSerializer mLogSerializer -> b
    com.microsoft.appcenter.ingestion.Ingestion mIngestion -> d
    java.util.UUID mInstallId -> c
    java.util.Map mEpochsAndSeqsByIKey -> e
    com.microsoft.appcenter.channel.Channel mChannel -> a
    void onGloballyEnabled(boolean) -> a
    void onGroupAdded(java.lang.String,com.microsoft.appcenter.channel.Channel$GroupListener,long) -> a
    void onGroupRemoved(java.lang.String) -> a
    void onPreparedLog(com.microsoft.appcenter.ingestion.models.Log,java.lang.String,int) -> a
    boolean shouldFilter(com.microsoft.appcenter.ingestion.models.Log) -> a
    boolean isOneCollectorCompatible(com.microsoft.appcenter.ingestion.models.Log) -> b
    void onClear(java.lang.String) -> b
    void setLogUrl(java.lang.String) -> c
    java.lang.String getOneCollectorGroupName(java.lang.String) -> d
    boolean isOneCollectorGroup(java.lang.String) -> e
com.microsoft.appcenter.channel.OneCollectorChannelListener$EpochAndSeq -> b.b.a.k.d$a:
    long seq -> b
    java.lang.String epoch -> a
com.microsoft.appcenter.crashes.AbstractCrashesListener -> com.microsoft.appcenter.crashes.a:
    java.lang.Iterable getErrorAttachments(com.microsoft.appcenter.crashes.model.ErrorReport) -> a
    void onSendingFailed(com.microsoft.appcenter.crashes.model.ErrorReport,java.lang.Exception) -> a
    boolean shouldAwaitUserConfirmation() -> a
    void onBeforeSending(com.microsoft.appcenter.crashes.model.ErrorReport) -> b
    boolean shouldProcess(com.microsoft.appcenter.crashes.model.ErrorReport) -> c
    void onSendingSucceeded(com.microsoft.appcenter.crashes.model.ErrorReport) -> d
com.microsoft.appcenter.crashes.Crashes -> com.microsoft.appcenter.crashes.Crashes:
    boolean mSavedUncaughtException -> m
    android.content.ComponentCallbacks2 mMemoryWarningListener -> l
    boolean mAutomaticProcessing -> n
    boolean mHasReceivedMemoryWarningInLastSession -> o
    long mInitializeTimestamp -> h
    com.microsoft.appcenter.crashes.CrashesListener mCrashesListener -> k
    com.microsoft.appcenter.crashes.UncaughtExceptionHandler mUncaughtExceptionHandler -> j
    com.microsoft.appcenter.ingestion.models.json.LogSerializer mLogSerializer -> f
    android.content.Context mContext -> g
    com.microsoft.appcenter.crashes.Crashes sInstance -> q
    com.microsoft.appcenter.crashes.CrashesListener DEFAULT_ERROR_REPORTING_LISTENER -> p
    java.util.Map mFactories -> c
    java.util.Map mUnprocessedErrorReports -> d
    com.microsoft.appcenter.ingestion.models.Device mDevice -> i
    java.util.Map mErrorReportCache -> e
    java.util.Map access$1000(com.microsoft.appcenter.crashes.Crashes) -> a
    void access$1100(com.microsoft.appcenter.crashes.Crashes,int) -> a
    void access$1500(com.microsoft.appcenter.crashes.Crashes,java.util.UUID) -> a
    void access$400(int) -> a
    void access$600(com.microsoft.appcenter.crashes.Crashes,java.lang.Runnable) -> a
    void access$900(com.microsoft.appcenter.crashes.Crashes,java.util.UUID,java.lang.Iterable) -> a
    com.microsoft.appcenter.crashes.model.ErrorReport buildErrorReport(com.microsoft.appcenter.crashes.ingestion.models.ManagedErrorLog) -> a
    com.microsoft.appcenter.ingestion.models.Device getDeviceInfo(android.content.Context) -> a
    java.util.Map getLogFactories() -> a
    void onStarted(android.content.Context,com.microsoft.appcenter.channel.Channel,java.lang.String,java.lang.String,boolean) -> a
    void processSingleMinidump(java.io.File,java.io.File) -> a
    void removeAllStoredErrorLogFiles(java.util.UUID) -> a
    java.util.UUID saveErrorLogFiles(java.lang.Throwable,com.microsoft.appcenter.crashes.ingestion.models.ManagedErrorLog) -> a
    java.util.UUID saveUncaughtException(java.lang.Thread,java.lang.Throwable,com.microsoft.appcenter.crashes.ingestion.models.Exception) -> a
    void saveUncaughtException(java.lang.Thread,java.lang.Throwable) -> a
    void sendErrorAttachment(java.util.UUID,java.lang.Iterable) -> a
    boolean access$1200(com.microsoft.appcenter.crashes.Crashes) -> b
    void access$500(com.microsoft.appcenter.crashes.Crashes,java.util.UUID) -> b
    void applyEnabledState(boolean) -> b
    java.lang.String getServiceName() -> b
    void handleUserConfirmation(int) -> b
    void removeStoredThrowable(java.util.UUID) -> b
    com.microsoft.appcenter.channel.Channel access$1700(com.microsoft.appcenter.crashes.Crashes) -> c
    boolean isMemoryRunningLevelWasReceived(int) -> c
    com.microsoft.appcenter.crashes.CrashesListener access$700(com.microsoft.appcenter.crashes.Crashes) -> d
    void saveMemoryRunningLevel(int) -> d
    com.microsoft.appcenter.utils.async.AppCenterFuture setEnabled(boolean) -> d
    com.microsoft.appcenter.channel.Channel$GroupListener getChannelListener() -> g
    java.lang.String getGroupName() -> i
    java.lang.String getLoggerTag() -> j
    int getTriggerCount() -> k
    void generateTestCrash() -> o
    void initialize() -> p
    com.microsoft.appcenter.utils.async.AppCenterFuture isEnabled() -> q
    void processMinidumpFiles() -> r
    void processPendingErrors() -> s
    boolean sendCrashReportsOrAwaitUserConfirmation() -> t
com.microsoft.appcenter.crashes.Crashes$1 -> com.microsoft.appcenter.crashes.b:
com.microsoft.appcenter.crashes.Crashes$10 -> com.microsoft.appcenter.crashes.Crashes$a:
com.microsoft.appcenter.crashes.Crashes$11 -> com.microsoft.appcenter.crashes.Crashes$b:
    com.microsoft.appcenter.crashes.Crashes this$0 -> b
    boolean val$alwaysSend -> a
com.microsoft.appcenter.crashes.Crashes$12 -> com.microsoft.appcenter.crashes.Crashes$c:
    com.microsoft.appcenter.crashes.Crashes this$0 -> b
    int val$userConfirmation -> a
com.microsoft.appcenter.crashes.Crashes$5 -> com.microsoft.appcenter.crashes.Crashes$d:
com.microsoft.appcenter.crashes.Crashes$6 -> com.microsoft.appcenter.crashes.Crashes$e:
    com.microsoft.appcenter.crashes.Crashes this$0 -> a
    void onBeforeSending(com.microsoft.appcenter.ingestion.models.Log) -> a
    void onFailure(com.microsoft.appcenter.ingestion.models.Log,java.lang.Exception) -> a
    void processCallback(com.microsoft.appcenter.ingestion.models.Log,com.microsoft.appcenter.crashes.Crashes$CallbackProcessor) -> a
    void onSuccess(com.microsoft.appcenter.ingestion.models.Log) -> b
com.microsoft.appcenter.crashes.Crashes$6$1 -> com.microsoft.appcenter.crashes.Crashes$e$a:
    com.microsoft.appcenter.crashes.Crashes$6 this$1 -> c
    com.microsoft.appcenter.crashes.Crashes$CallbackProcessor val$callbackProcessor -> b
    com.microsoft.appcenter.ingestion.models.Log val$log -> a
com.microsoft.appcenter.crashes.Crashes$6$1$1 -> com.microsoft.appcenter.crashes.Crashes$e$a$a:
    com.microsoft.appcenter.crashes.model.ErrorReport val$report -> a
    com.microsoft.appcenter.crashes.Crashes$6$1 this$2 -> b
com.microsoft.appcenter.crashes.Crashes$6$2 -> com.microsoft.appcenter.crashes.Crashes$e$b:
    com.microsoft.appcenter.crashes.Crashes$6 this$1 -> a
    void onCallBack(com.microsoft.appcenter.crashes.model.ErrorReport) -> a
    boolean shouldDeleteThrowable() -> a
com.microsoft.appcenter.crashes.Crashes$6$3 -> com.microsoft.appcenter.crashes.Crashes$e$c:
    com.microsoft.appcenter.crashes.Crashes$6 this$1 -> a
    void onCallBack(com.microsoft.appcenter.crashes.model.ErrorReport) -> a
    boolean shouldDeleteThrowable() -> a
com.microsoft.appcenter.crashes.Crashes$6$4 -> com.microsoft.appcenter.crashes.Crashes$e$d:
    com.microsoft.appcenter.crashes.Crashes$6 this$1 -> b
    java.lang.Exception val$e -> a
    void onCallBack(com.microsoft.appcenter.crashes.model.ErrorReport) -> a
    boolean shouldDeleteThrowable() -> a
com.microsoft.appcenter.crashes.Crashes$CallbackProcessor -> com.microsoft.appcenter.crashes.Crashes$f:
    void onCallBack(com.microsoft.appcenter.crashes.model.ErrorReport) -> a
    boolean shouldDeleteThrowable() -> a
com.microsoft.appcenter.crashes.Crashes$DefaultCrashesListener -> com.microsoft.appcenter.crashes.Crashes$g:
com.microsoft.appcenter.crashes.Crashes$ErrorLogReport -> com.microsoft.appcenter.crashes.Crashes$h:
    com.microsoft.appcenter.crashes.ingestion.models.ManagedErrorLog log -> a
    com.microsoft.appcenter.crashes.model.ErrorReport report -> b
    com.microsoft.appcenter.crashes.model.ErrorReport access$1300(com.microsoft.appcenter.crashes.Crashes$ErrorLogReport) -> a
    com.microsoft.appcenter.crashes.ingestion.models.ManagedErrorLog access$1600(com.microsoft.appcenter.crashes.Crashes$ErrorLogReport) -> b
com.microsoft.appcenter.crashes.CrashesListener -> com.microsoft.appcenter.crashes.c:
    java.lang.Iterable getErrorAttachments(com.microsoft.appcenter.crashes.model.ErrorReport) -> a
    void onSendingFailed(com.microsoft.appcenter.crashes.model.ErrorReport,java.lang.Exception) -> a
    boolean shouldAwaitUserConfirmation() -> a
    void onBeforeSending(com.microsoft.appcenter.crashes.model.ErrorReport) -> b
    boolean shouldProcess(com.microsoft.appcenter.crashes.model.ErrorReport) -> c
    void onSendingSucceeded(com.microsoft.appcenter.crashes.model.ErrorReport) -> d
com.microsoft.appcenter.crashes.UncaughtExceptionHandler -> com.microsoft.appcenter.crashes.d:
    java.lang.Thread$UncaughtExceptionHandler mDefaultUncaughtExceptionHandler -> b
    boolean mIgnoreDefaultExceptionHandler -> a
    void register() -> a
    void unregister() -> b
com.microsoft.appcenter.crashes.WrapperSdkExceptionManager -> com.microsoft.appcenter.crashes.e:
    java.util.Map sWrapperExceptionDataContainer -> a
    void deleteWrapperExceptionData(java.util.UUID) -> a
    java.io.File getFile(java.util.UUID) -> b
    java.lang.String loadWrapperExceptionData(java.util.UUID) -> c
com.microsoft.appcenter.crashes.ingestion.models.AbstractErrorLog -> com.microsoft.appcenter.crashes.f.a.a:
    java.util.UUID id -> h
    java.lang.String processName -> j
    java.lang.Integer processId -> i
    java.lang.Long errorThreadId -> m
    java.util.Date appLaunchTimestamp -> p
    java.lang.String parentProcessName -> l
    java.lang.Integer parentProcessId -> k
    java.lang.Boolean fatal -> o
    java.lang.String errorThreadName -> n
    java.lang.String architecture -> q
    void read(org.json.JSONObject) -> a
    void setErrorThreadId(java.lang.Long) -> a
    void setFatal(java.lang.Boolean) -> a
    void setParentProcessId(java.lang.Integer) -> a
    void write(org.json.JSONStringer) -> a
    void setAppLaunchTimestamp(java.util.Date) -> b
    void setId(java.util.UUID) -> b
    void setProcessId(java.lang.Integer) -> b
    void setArchitecture(java.lang.String) -> d
    void setErrorThreadName(java.lang.String) -> e
    void setParentProcessName(java.lang.String) -> f
    void setProcessName(java.lang.String) -> g
    java.util.Date getAppLaunchTimestamp() -> i
    java.lang.String getArchitecture() -> j
    java.lang.Long getErrorThreadId() -> k
    java.lang.String getErrorThreadName() -> l
    java.lang.Boolean getFatal() -> m
    java.util.UUID getId() -> n
    java.lang.Integer getParentProcessId() -> o
    java.lang.String getParentProcessName() -> p
    java.lang.Integer getProcessId() -> q
    java.lang.String getProcessName() -> r
com.microsoft.appcenter.crashes.ingestion.models.ErrorAttachmentLog -> com.microsoft.appcenter.crashes.f.a.b:
    java.util.UUID errorId -> i
    java.util.UUID id -> h
    java.lang.String fileName -> k
    byte[] data -> l
    java.lang.String contentType -> j
    com.microsoft.appcenter.crashes.ingestion.models.ErrorAttachmentLog attachmentWithBinary(byte[],java.lang.String,java.lang.String) -> a
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void setData(byte[]) -> a
    void write(org.json.JSONStringer) -> a
    void setErrorId(java.util.UUID) -> b
    void setId(java.util.UUID) -> c
    void setContentType(java.lang.String) -> d
    void setFileName(java.lang.String) -> e
    java.lang.String getContentType() -> i
    byte[] getData() -> j
    java.util.UUID getErrorId() -> k
    java.lang.String getFileName() -> l
    java.util.UUID getId() -> m
    boolean isValid() -> n
com.microsoft.appcenter.crashes.ingestion.models.Exception -> com.microsoft.appcenter.crashes.f.a.c:
    java.lang.String minidumpFilePath -> g
    java.lang.String wrapperSdkName -> f
    java.util.List innerExceptions -> e
    java.util.List frames -> d
    java.lang.String type -> a
    java.lang.String stackTrace -> c
    java.lang.String message -> b
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void setFrames(java.util.List) -> a
    void write(org.json.JSONStringer) -> a
    void setInnerExceptions(java.util.List) -> b
    void setMessage(java.lang.String) -> b
    void setMinidumpFilePath(java.lang.String) -> c
    void setStackTrace(java.lang.String) -> d
    void setType(java.lang.String) -> e
    void setWrapperSdkName(java.lang.String) -> f
    java.util.List getFrames() -> h
    java.util.List getInnerExceptions() -> i
    java.lang.String getMessage() -> j
    java.lang.String getMinidumpFilePath() -> k
    java.lang.String getStackTrace() -> l
    java.lang.String getWrapperSdkName() -> m
com.microsoft.appcenter.crashes.ingestion.models.HandledErrorLog -> com.microsoft.appcenter.crashes.f.a.d:
    java.util.UUID id -> i
    com.microsoft.appcenter.crashes.ingestion.models.Exception exception -> j
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void setException(com.microsoft.appcenter.crashes.ingestion.models.Exception) -> a
    void write(org.json.JSONStringer) -> a
    void setId(java.util.UUID) -> b
    com.microsoft.appcenter.crashes.ingestion.models.Exception getException() -> j
    java.util.UUID getId() -> k
com.microsoft.appcenter.crashes.ingestion.models.ManagedErrorLog -> com.microsoft.appcenter.crashes.f.a.e:
    java.util.List threads -> s
    com.microsoft.appcenter.crashes.ingestion.models.Exception exception -> r
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void setException(com.microsoft.appcenter.crashes.ingestion.models.Exception) -> a
    void setThreads(java.util.List) -> a
    void write(org.json.JSONStringer) -> a
    com.microsoft.appcenter.crashes.ingestion.models.Exception getException() -> s
    java.util.List getThreads() -> t
com.microsoft.appcenter.crashes.ingestion.models.StackFrame -> com.microsoft.appcenter.crashes.f.a.f:
    java.lang.Integer lineNumber -> c
    java.lang.String className -> a
    java.lang.String methodName -> b
    java.lang.String fileName -> d
    void read(org.json.JSONObject) -> a
    void setLineNumber(java.lang.Integer) -> a
    void write(org.json.JSONStringer) -> a
    void setClassName(java.lang.String) -> b
    void setFileName(java.lang.String) -> c
    void setMethodName(java.lang.String) -> d
    java.lang.String getClassName() -> h
    java.lang.String getFileName() -> i
    java.lang.Integer getLineNumber() -> j
    java.lang.String getMethodName() -> k
com.microsoft.appcenter.crashes.ingestion.models.Thread -> com.microsoft.appcenter.crashes.f.a.g:
    java.util.List frames -> c
    long id -> a
    java.lang.String name -> b
    void read(org.json.JSONObject) -> a
    void setFrames(java.util.List) -> a
    void setId(long) -> a
    void write(org.json.JSONStringer) -> a
    void setName(java.lang.String) -> b
    java.util.List getFrames() -> h
    long getId() -> i
    java.lang.String getName() -> j
com.microsoft.appcenter.crashes.ingestion.models.json.ErrorAttachmentLogFactory -> com.microsoft.appcenter.crashes.f.a.h.a:
    com.microsoft.appcenter.crashes.ingestion.models.json.ErrorAttachmentLogFactory sInstance -> a
    com.microsoft.appcenter.crashes.ingestion.models.ErrorAttachmentLog create() -> a
    com.microsoft.appcenter.ingestion.models.Log create() -> a
    com.microsoft.appcenter.crashes.ingestion.models.json.ErrorAttachmentLogFactory getInstance() -> b
com.microsoft.appcenter.crashes.ingestion.models.json.ExceptionFactory -> com.microsoft.appcenter.crashes.f.a.h.b:
    com.microsoft.appcenter.crashes.ingestion.models.json.ExceptionFactory sInstance -> a
    com.microsoft.appcenter.crashes.ingestion.models.Exception create() -> a
    com.microsoft.appcenter.ingestion.models.Model create() -> a
    java.util.List createList(int) -> a
    com.microsoft.appcenter.crashes.ingestion.models.json.ExceptionFactory getInstance() -> b
com.microsoft.appcenter.crashes.ingestion.models.json.HandledErrorLogFactory -> com.microsoft.appcenter.crashes.f.a.h.c:
    com.microsoft.appcenter.crashes.ingestion.models.json.HandledErrorLogFactory sInstance -> a
    com.microsoft.appcenter.crashes.ingestion.models.HandledErrorLog create() -> a
    com.microsoft.appcenter.ingestion.models.Log create() -> a
    com.microsoft.appcenter.crashes.ingestion.models.json.HandledErrorLogFactory getInstance() -> b
com.microsoft.appcenter.crashes.ingestion.models.json.ManagedErrorLogFactory -> com.microsoft.appcenter.crashes.f.a.h.d:
    com.microsoft.appcenter.crashes.ingestion.models.json.ManagedErrorLogFactory sInstance -> a
    com.microsoft.appcenter.crashes.ingestion.models.ManagedErrorLog create() -> a
    com.microsoft.appcenter.ingestion.models.Log create() -> a
    com.microsoft.appcenter.crashes.ingestion.models.json.ManagedErrorLogFactory getInstance() -> b
com.microsoft.appcenter.crashes.ingestion.models.json.StackFrameFactory -> com.microsoft.appcenter.crashes.f.a.h.e:
    com.microsoft.appcenter.crashes.ingestion.models.json.StackFrameFactory sInstance -> a
    com.microsoft.appcenter.crashes.ingestion.models.StackFrame create() -> a
    com.microsoft.appcenter.ingestion.models.Model create() -> a
    java.util.List createList(int) -> a
    com.microsoft.appcenter.crashes.ingestion.models.json.StackFrameFactory getInstance() -> b
com.microsoft.appcenter.crashes.ingestion.models.json.ThreadFactory -> com.microsoft.appcenter.crashes.f.a.h.f:
    com.microsoft.appcenter.crashes.ingestion.models.json.ThreadFactory sInstance -> a
    com.microsoft.appcenter.crashes.ingestion.models.Thread create() -> a
    com.microsoft.appcenter.ingestion.models.Model create() -> a
    java.util.List createList(int) -> a
    com.microsoft.appcenter.crashes.ingestion.models.json.ThreadFactory getInstance() -> b
com.microsoft.appcenter.crashes.model.ErrorReport -> com.microsoft.appcenter.crashes.g.a:
    com.microsoft.appcenter.ingestion.models.Device device -> a
    com.microsoft.appcenter.ingestion.models.Device getDevice() -> a
    void setAppErrorTime(java.util.Date) -> a
    void setDevice(com.microsoft.appcenter.ingestion.models.Device) -> a
    void setId(java.lang.String) -> a
    void setAppStartTime(java.util.Date) -> b
    void setStackTrace(java.lang.String) -> b
    void setThreadName(java.lang.String) -> c
com.microsoft.appcenter.crashes.model.NativeException -> com.microsoft.appcenter.crashes.g.b:
com.microsoft.appcenter.crashes.model.TestCrashException -> com.microsoft.appcenter.crashes.g.c:
com.microsoft.appcenter.crashes.utils.ErrorLogHelper -> com.microsoft.appcenter.crashes.h.a:
    java.io.File sNewMinidumpDirectory -> b
    java.io.File sErrorLogDirectory -> a
    java.io.File sPendingMinidumpDirectory -> c
    java.io.File access$000() -> a
    com.microsoft.appcenter.crashes.ingestion.models.ManagedErrorLog createErrorLog(android.content.Context,java.lang.Thread,com.microsoft.appcenter.crashes.ingestion.models.Exception,java.util.Map,long,boolean) -> a
    com.microsoft.appcenter.crashes.model.ErrorReport getErrorReportFromErrorLog(com.microsoft.appcenter.crashes.ingestion.models.ManagedErrorLog,java.lang.String) -> a
    com.microsoft.appcenter.crashes.ingestion.models.Exception getModelExceptionFromThrowable(java.lang.Throwable) -> a
    java.util.List getModelFramesFromStackTrace(java.lang.StackTraceElement[]) -> a
    com.microsoft.appcenter.crashes.ingestion.models.StackFrame getModelStackFrame(java.lang.StackTraceElement) -> a
    com.microsoft.appcenter.ingestion.models.Device getStoredDeviceInfo(java.io.File) -> a
    java.io.File getStoredErrorLogFile(java.util.UUID) -> a
    java.io.File getStoredFile(java.util.UUID,java.lang.String) -> a
    com.microsoft.appcenter.ingestion.models.Device parseDevice(java.lang.String) -> a
    void cleanPendingMinidumps() -> b
    java.util.List getModelFramesFromStackTrace(java.lang.Throwable) -> b
    java.io.File getStoredThrowableFile(java.util.UUID) -> b
    java.util.UUID parseLogFolderUuid(java.io.File) -> b
    java.lang.String getArchitecture() -> c
    void removeStoredErrorLogFile(java.util.UUID) -> c
    java.io.File getErrorStorageDirectory() -> d
    void removeStoredThrowableFile(java.util.UUID) -> d
    java.io.File getLastErrorLogFile() -> e
    java.io.File getNewMinidumpDirectory() -> f
    java.io.File[] getNewMinidumpFiles() -> g
    java.io.File getPendingMinidumpDirectory() -> h
    java.io.File[] getStoredErrorLogFiles() -> i
    void removeMinidumpFolder() -> j
    void removeStaleMinidumpSubfolders() -> k
com.microsoft.appcenter.crashes.utils.ErrorLogHelper$1 -> com.microsoft.appcenter.crashes.h.a$a:
com.microsoft.appcenter.crashes.utils.ErrorLogHelper$2 -> com.microsoft.appcenter.crashes.h.a$b:
com.microsoft.appcenter.crashes.utils.ErrorLogHelper$3 -> com.microsoft.appcenter.crashes.h.a$c:
com.microsoft.appcenter.crashes.utils.ErrorLogHelper$4 -> com.microsoft.appcenter.crashes.h.a$d:
com.microsoft.appcenter.crashes.utils.ErrorLogHelper$5 -> com.microsoft.appcenter.crashes.h.a$e:
    java.util.UUID val$id -> a
    java.lang.String val$extension -> b
com.microsoft.appcenter.http.AbstractAppCallTemplate -> b.b.a.l.a:
    void onBeforeCalling(java.net.URL,java.util.Map) -> a
com.microsoft.appcenter.http.DefaultHttpClient -> b.b.a.l.b:
    java.util.Set mTasks -> a
    boolean mCompressionEnabled -> b
    com.microsoft.appcenter.http.ServiceCall callAsync(java.lang.String,java.lang.String,java.util.Map,com.microsoft.appcenter.http.HttpClient$CallTemplate,com.microsoft.appcenter.http.ServiceCallback) -> a
    void onStart(com.microsoft.appcenter.http.DefaultHttpClientCallTask) -> a
    void reopen() -> a
    void onFinish(com.microsoft.appcenter.http.DefaultHttpClientCallTask) -> b
com.microsoft.appcenter.http.DefaultHttpClient$1 -> b.b.a.l.b$a:
    com.microsoft.appcenter.http.ServiceCallback val$serviceCallback -> a
    java.util.concurrent.RejectedExecutionException val$e -> b
com.microsoft.appcenter.http.DefaultHttpClient$2 -> b.b.a.l.b$b:
com.microsoft.appcenter.http.DefaultHttpClientCallTask -> b.b.a.l.c:
    java.util.regex.Pattern TOKEN_REGEX_JSON -> i
    java.util.Map mHeaders -> c
    java.util.regex.Pattern TOKEN_REGEX_URL_ENCODED -> h
    com.microsoft.appcenter.http.HttpClient$CallTemplate mCallTemplate -> d
    com.microsoft.appcenter.http.ServiceCallback mServiceCallback -> e
    com.microsoft.appcenter.http.DefaultHttpClientCallTask$Tracker mTracker -> f
    java.lang.String mUrl -> a
    boolean mCompressionEnabled -> g
    java.util.regex.Pattern REDIRECT_URI_REGEX_JSON -> j
    java.lang.String mMethod -> b
    com.microsoft.appcenter.http.HttpResponse doHttpCall() -> a
    java.lang.Object doInBackground(java.lang.Void[]) -> a
    java.io.InputStream getInputStream(javax.net.ssl.HttpsURLConnection) -> a
    void writePayload(java.io.OutputStream,byte[]) -> a
    java.lang.String readResponse(javax.net.ssl.HttpsURLConnection) -> b
com.microsoft.appcenter.http.DefaultHttpClientCallTask$Tracker -> b.b.a.l.c$a:
    void onStart(com.microsoft.appcenter.http.DefaultHttpClientCallTask) -> a
    void onFinish(com.microsoft.appcenter.http.DefaultHttpClientCallTask) -> b
com.microsoft.appcenter.http.HttpClient -> b.b.a.l.d:
    com.microsoft.appcenter.http.ServiceCall callAsync(java.lang.String,java.lang.String,java.util.Map,com.microsoft.appcenter.http.HttpClient$CallTemplate,com.microsoft.appcenter.http.ServiceCallback) -> a
    void reopen() -> a
com.microsoft.appcenter.http.HttpClient$CallTemplate -> b.b.a.l.d$a:
    java.lang.String buildRequestBody() -> a
    void onBeforeCalling(java.net.URL,java.util.Map) -> a
com.microsoft.appcenter.http.HttpClientCallDecorator -> b.b.a.l.e:
    java.util.Map mHeaders -> d
    com.microsoft.appcenter.http.HttpClient$CallTemplate mCallTemplate -> e
    com.microsoft.appcenter.http.HttpClient mDecoratedApi -> a
    java.lang.String mMethod -> c
    java.lang.String mUrl -> b
    com.microsoft.appcenter.http.ServiceCallback mServiceCallback -> f
    void onCallFailed(java.lang.Exception) -> a
    void onCallSucceeded(com.microsoft.appcenter.http.HttpResponse) -> a
com.microsoft.appcenter.http.HttpClientDecorator -> b.b.a.l.f:
    com.microsoft.appcenter.http.HttpClient mDecoratedApi -> a
    void reopen() -> a
com.microsoft.appcenter.http.HttpClientNetworkStateHandler -> b.b.a.l.g:
    java.util.Set mCalls -> c
    com.microsoft.appcenter.utils.NetworkStateHelper mNetworkStateHelper -> b
    com.microsoft.appcenter.http.ServiceCall callAsync(java.lang.String,java.lang.String,java.util.Map,com.microsoft.appcenter.http.HttpClient$CallTemplate,com.microsoft.appcenter.http.ServiceCallback) -> a
    void onNetworkStateUpdated(boolean) -> a
    void reopen() -> a
com.microsoft.appcenter.http.HttpClientNetworkStateHandler$Call -> b.b.a.l.g$a:
com.microsoft.appcenter.http.HttpClientRetryer -> b.b.a.l.h:
    long[] RETRY_INTERVALS -> d
    android.os.Handler mHandler -> b
    java.util.Random mRandom -> c
    android.os.Handler access$000(com.microsoft.appcenter.http.HttpClientRetryer) -> a
    com.microsoft.appcenter.http.ServiceCall callAsync(java.lang.String,java.lang.String,java.util.Map,com.microsoft.appcenter.http.HttpClient$CallTemplate,com.microsoft.appcenter.http.ServiceCallback) -> a
    java.util.Random access$100(com.microsoft.appcenter.http.HttpClientRetryer) -> b
com.microsoft.appcenter.http.HttpClientRetryer$RetryableCall -> b.b.a.l.h$a:
    com.microsoft.appcenter.http.HttpClientRetryer this$0 -> h
    int mRetryCount -> g
    void onCallFailed(java.lang.Exception) -> a
com.microsoft.appcenter.http.HttpException -> b.b.a.l.i:
    com.microsoft.appcenter.http.HttpResponse mHttpResponse -> a
    java.lang.String getDetailMessage(int,java.lang.String) -> a
    com.microsoft.appcenter.http.HttpResponse getHttpResponse() -> a
com.microsoft.appcenter.http.HttpResponse -> b.b.a.l.j:
    java.util.Map headers -> c
    java.lang.String payload -> b
    int statusCode -> a
    java.util.Map getHeaders() -> a
    java.lang.String getPayload() -> b
    int getStatusCode() -> c
com.microsoft.appcenter.http.HttpUtils -> b.b.a.l.k:
    java.util.regex.Pattern TOKEN_VALUE_PATTERN -> c
    java.util.regex.Pattern CONNECTION_ISSUE_PATTERN -> b
    java.lang.Class[] RECOVERABLE_EXCEPTIONS -> a
    java.util.regex.Pattern API_KEY_PATTERN -> d
    com.microsoft.appcenter.http.HttpClient createHttpClient(android.content.Context) -> a
    com.microsoft.appcenter.http.HttpClient createHttpClient(android.content.Context,boolean) -> a
    javax.net.ssl.HttpsURLConnection createHttpsConnection(java.net.URL) -> a
    java.lang.String hideApiKeys(java.lang.String) -> a
    boolean isRecoverableError(java.lang.Throwable) -> a
    com.microsoft.appcenter.http.HttpClient createHttpClientWithoutRetryer(android.content.Context,boolean) -> b
    java.lang.String hideSecret(java.lang.String) -> b
    java.lang.String hideTickets(java.lang.String) -> c
com.microsoft.appcenter.http.ServiceCall -> b.b.a.l.l:
com.microsoft.appcenter.http.ServiceCallback -> b.b.a.l.m:
    void onCallFailed(java.lang.Exception) -> a
    void onCallSucceeded(com.microsoft.appcenter.http.HttpResponse) -> a
com.microsoft.appcenter.http.TLS1_2SocketFactory -> b.b.a.l.n:
    java.lang.String[] ENABLED_PROTOCOLS -> a
    javax.net.ssl.SSLSocket forceTLS1_2(java.net.Socket) -> a
com.microsoft.appcenter.ingestion.AppCenterIngestion -> b.b.a.m.a:
    com.microsoft.appcenter.ingestion.models.json.LogSerializer mLogSerializer -> a
    java.lang.String mLogUrl -> c
    com.microsoft.appcenter.http.HttpClient mHttpClient -> b
    void reopen() -> a
    com.microsoft.appcenter.http.ServiceCall sendAsync(java.lang.String,java.util.UUID,com.microsoft.appcenter.ingestion.models.LogContainer,com.microsoft.appcenter.http.ServiceCallback) -> a
    void setLogUrl(java.lang.String) -> a
com.microsoft.appcenter.ingestion.AppCenterIngestion$IngestionCallTemplate -> b.b.a.m.a$a:
    com.microsoft.appcenter.ingestion.models.json.LogSerializer mLogSerializer -> a
    com.microsoft.appcenter.ingestion.models.LogContainer mLogContainer -> b
    java.lang.String buildRequestBody() -> a
com.microsoft.appcenter.ingestion.Ingestion -> b.b.a.m.b:
    void reopen() -> a
    com.microsoft.appcenter.http.ServiceCall sendAsync(java.lang.String,java.util.UUID,com.microsoft.appcenter.ingestion.models.LogContainer,com.microsoft.appcenter.http.ServiceCallback) -> a
    void setLogUrl(java.lang.String) -> a
com.microsoft.appcenter.ingestion.OneCollectorIngestion -> b.b.a.m.c:
    com.microsoft.appcenter.ingestion.models.json.LogSerializer mLogSerializer -> a
    java.lang.String mLogUrl -> c
    com.microsoft.appcenter.http.HttpClient mHttpClient -> b
    void reopen() -> a
    com.microsoft.appcenter.http.ServiceCall sendAsync(java.lang.String,java.util.UUID,com.microsoft.appcenter.ingestion.models.LogContainer,com.microsoft.appcenter.http.ServiceCallback) -> a
    void setLogUrl(java.lang.String) -> a
com.microsoft.appcenter.ingestion.OneCollectorIngestion$IngestionCallTemplate -> b.b.a.m.c$a:
    com.microsoft.appcenter.ingestion.models.json.LogSerializer mLogSerializer -> a
    com.microsoft.appcenter.ingestion.models.LogContainer mLogContainer -> b
    java.lang.String buildRequestBody() -> a
    void onBeforeCalling(java.net.URL,java.util.Map) -> a
com.microsoft.appcenter.ingestion.models.AbstractLog -> b.b.a.m.d.a:
    java.util.Date timestamp -> b
    java.lang.Object tag -> g
    java.util.UUID sid -> c
    java.util.Set transmissionTargetTokens -> a
    com.microsoft.appcenter.ingestion.models.Device device -> f
    java.lang.String userId -> e
    java.lang.String distributionGroupId -> d
    void addTransmissionTarget(java.lang.String) -> a
    void read(org.json.JSONObject) -> a
    void setDevice(com.microsoft.appcenter.ingestion.models.Device) -> a
    void setSid(java.util.UUID) -> a
    void setTag(java.lang.Object) -> a
    void setTimestamp(java.util.Date) -> a
    void write(org.json.JSONStringer) -> a
    java.lang.String getUserId() -> b
    void setDistributionGroupId(java.lang.String) -> b
    java.lang.Object getTag() -> c
    void setUserId(java.lang.String) -> c
    java.util.Set getTransmissionTargetTokens() -> d
    java.util.UUID getSid() -> e
    com.microsoft.appcenter.ingestion.models.Device getDevice() -> f
    java.util.Date getTimestamp() -> g
    java.lang.String getDistributionGroupId() -> h
com.microsoft.appcenter.ingestion.models.CustomPropertiesLog -> b.b.a.m.d.b:
    java.util.Map properties -> h
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void setProperties(java.util.Map) -> a
    void write(org.json.JSONStringer) -> a
    void writeProperties(org.json.JSONStringer,java.util.Map) -> a
    void writePropertyValue(org.json.JSONStringer,java.lang.Object) -> a
    java.util.Map readProperties(org.json.JSONObject) -> b
    java.lang.Object readPropertyValue(org.json.JSONObject) -> c
    java.util.Map getProperties() -> i
com.microsoft.appcenter.ingestion.models.Device -> b.b.a.m.d.c:
    java.lang.String sdkName -> g
    java.lang.String model -> i
    java.lang.String sdkVersion -> h
    java.lang.String osName -> k
    java.lang.String oemName -> j
    java.lang.String osBuild -> m
    java.lang.String osVersion -> l
    java.lang.String locale -> o
    java.lang.String screenSize -> q
    java.lang.String carrierName -> s
    java.lang.String appVersion -> r
    java.lang.String appBuild -> u
    java.lang.String carrierCountry -> t
    java.lang.String appNamespace -> v
    java.lang.Integer osApiLevel -> n
    java.lang.Integer timeZoneOffset -> p
    java.lang.String getSdkName() -> A
    java.lang.String getSdkVersion() -> B
    java.lang.Integer getTimeZoneOffset() -> C
    void read(org.json.JSONObject) -> a
    void setOsApiLevel(java.lang.Integer) -> a
    void write(org.json.JSONStringer) -> a
    void setTimeZoneOffset(java.lang.Integer) -> b
    void setAppBuild(java.lang.String) -> h
    void setAppNamespace(java.lang.String) -> i
    void setAppVersion(java.lang.String) -> j
    void setCarrierCountry(java.lang.String) -> k
    void setCarrierName(java.lang.String) -> l
    void setLocale(java.lang.String) -> m
    java.lang.String getAppBuild() -> n
    void setModel(java.lang.String) -> n
    java.lang.String getAppNamespace() -> o
    void setOemName(java.lang.String) -> o
    java.lang.String getAppVersion() -> p
    void setOsBuild(java.lang.String) -> p
    java.lang.String getCarrierCountry() -> q
    void setOsName(java.lang.String) -> q
    java.lang.String getCarrierName() -> r
    void setOsVersion(java.lang.String) -> r
    java.lang.String getLocale() -> s
    void setScreenSize(java.lang.String) -> s
    java.lang.String getModel() -> t
    void setSdkName(java.lang.String) -> t
    java.lang.String getOemName() -> u
    void setSdkVersion(java.lang.String) -> u
    java.lang.Integer getOsApiLevel() -> v
    java.lang.String getOsBuild() -> w
    java.lang.String getOsName() -> x
    java.lang.String getOsVersion() -> y
    java.lang.String getScreenSize() -> z
com.microsoft.appcenter.ingestion.models.Log -> b.b.a.m.d.d:
    void addTransmissionTarget(java.lang.String) -> a
    java.lang.String getType() -> a
    void setDevice(com.microsoft.appcenter.ingestion.models.Device) -> a
    void setSid(java.util.UUID) -> a
    void setTimestamp(java.util.Date) -> a
    java.lang.String getUserId() -> b
    java.lang.Object getTag() -> c
    java.util.Set getTransmissionTargetTokens() -> d
    java.util.UUID getSid() -> e
    com.microsoft.appcenter.ingestion.models.Device getDevice() -> f
    java.util.Date getTimestamp() -> g
com.microsoft.appcenter.ingestion.models.LogContainer -> b.b.a.m.d.e:
    java.util.List logs -> a
    java.util.List getLogs() -> a
    void setLogs(java.util.List) -> a
com.microsoft.appcenter.ingestion.models.LogWithProperties -> b.b.a.m.d.f:
    java.util.Map properties -> h
    void read(org.json.JSONObject) -> a
    void setProperties(java.util.Map) -> a
    void write(org.json.JSONStringer) -> a
    java.util.Map getProperties() -> i
com.microsoft.appcenter.ingestion.models.Model -> b.b.a.m.d.g:
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
com.microsoft.appcenter.ingestion.models.StartServiceLog -> b.b.a.m.d.h:
    java.util.List services -> h
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void setServices(java.util.List) -> a
    void write(org.json.JSONStringer) -> a
    java.util.List getServices() -> i
com.microsoft.appcenter.ingestion.models.WrapperSdk -> b.b.a.m.d.i:
    java.lang.String liveUpdatePackageHash -> f
    java.lang.String wrapperSdkVersion -> a
    java.lang.String wrapperRuntimeVersion -> c
    java.lang.String wrapperSdkName -> b
    java.lang.String liveUpdateDeploymentKey -> e
    java.lang.String liveUpdateReleaseLabel -> d
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    void setLiveUpdateDeploymentKey(java.lang.String) -> b
    void setLiveUpdatePackageHash(java.lang.String) -> c
    void setLiveUpdateReleaseLabel(java.lang.String) -> d
    void setWrapperRuntimeVersion(java.lang.String) -> e
    void setWrapperSdkName(java.lang.String) -> f
    void setWrapperSdkVersion(java.lang.String) -> g
    java.lang.String getLiveUpdateDeploymentKey() -> h
    java.lang.String getLiveUpdatePackageHash() -> i
    java.lang.String getLiveUpdateReleaseLabel() -> j
    java.lang.String getWrapperRuntimeVersion() -> k
    java.lang.String getWrapperSdkName() -> l
    java.lang.String getWrapperSdkVersion() -> m
com.microsoft.appcenter.ingestion.models.json.AbstractLogFactory -> b.b.a.m.d.j.a:
    java.util.Collection toCommonSchemaLogs(com.microsoft.appcenter.ingestion.models.Log) -> a
com.microsoft.appcenter.ingestion.models.json.CustomPropertiesLogFactory -> b.b.a.m.d.j.b:
    com.microsoft.appcenter.ingestion.models.Log create() -> a
com.microsoft.appcenter.ingestion.models.json.DefaultLogSerializer -> b.b.a.m.d.j.c:
    java.util.Map mLogFactories -> a
    void addLogFactory(java.lang.String,com.microsoft.appcenter.ingestion.models.json.LogFactory) -> a
    com.microsoft.appcenter.ingestion.models.Log deserializeLog(java.lang.String,java.lang.String) -> a
    com.microsoft.appcenter.ingestion.models.Log readLog(org.json.JSONObject,java.lang.String) -> a
    java.lang.String serializeContainer(com.microsoft.appcenter.ingestion.models.LogContainer) -> a
    java.util.Collection toCommonSchemaLog(com.microsoft.appcenter.ingestion.models.Log) -> a
    org.json.JSONStringer writeLog(org.json.JSONStringer,com.microsoft.appcenter.ingestion.models.Log) -> a
    java.lang.String serializeLog(com.microsoft.appcenter.ingestion.models.Log) -> b
com.microsoft.appcenter.ingestion.models.json.JSONDateUtils -> b.b.a.m.d.j.d:
    java.lang.ThreadLocal DATE_FORMAT -> a
    void checkNull(java.lang.Object) -> a
    java.util.Date toDate(java.lang.String) -> a
    java.lang.String toString(java.util.Date) -> a
com.microsoft.appcenter.ingestion.models.json.JSONDateUtils$1 -> b.b.a.m.d.j.d$a:
com.microsoft.appcenter.ingestion.models.json.JSONUtils -> b.b.a.m.d.j.e:
    java.util.List readArray(org.json.JSONObject,java.lang.String,com.microsoft.appcenter.ingestion.models.json.ModelFactory) -> a
    java.lang.Boolean readBoolean(org.json.JSONObject,java.lang.String) -> a
    void write(org.json.JSONStringer,java.lang.String,java.lang.Object) -> a
    void writeArray(org.json.JSONStringer,java.lang.String,java.util.List) -> a
    void writeMap(org.json.JSONStringer,java.lang.String,java.util.Map) -> a
    java.lang.Integer readInteger(org.json.JSONObject,java.lang.String) -> b
    void writeStringArray(org.json.JSONStringer,java.lang.String,java.util.List) -> b
    java.lang.Long readLong(org.json.JSONObject,java.lang.String) -> c
    java.util.Map readMap(org.json.JSONObject,java.lang.String) -> d
    java.util.List readStringArray(org.json.JSONObject,java.lang.String) -> e
com.microsoft.appcenter.ingestion.models.json.LogFactory -> b.b.a.m.d.j.f:
    com.microsoft.appcenter.ingestion.models.Log create() -> a
    java.util.Collection toCommonSchemaLogs(com.microsoft.appcenter.ingestion.models.Log) -> a
com.microsoft.appcenter.ingestion.models.json.LogSerializer -> b.b.a.m.d.j.g:
    void addLogFactory(java.lang.String,com.microsoft.appcenter.ingestion.models.json.LogFactory) -> a
    com.microsoft.appcenter.ingestion.models.Log deserializeLog(java.lang.String,java.lang.String) -> a
    java.lang.String serializeContainer(com.microsoft.appcenter.ingestion.models.LogContainer) -> a
    java.util.Collection toCommonSchemaLog(com.microsoft.appcenter.ingestion.models.Log) -> a
    java.lang.String serializeLog(com.microsoft.appcenter.ingestion.models.Log) -> b
com.microsoft.appcenter.ingestion.models.json.ModelFactory -> b.b.a.m.d.j.h:
    com.microsoft.appcenter.ingestion.models.Model create() -> a
    java.util.List createList(int) -> a
com.microsoft.appcenter.ingestion.models.json.StartServiceLogFactory -> b.b.a.m.d.j.i:
    com.microsoft.appcenter.ingestion.models.Log create() -> a
com.microsoft.appcenter.ingestion.models.one.AppExtension -> b.b.a.m.d.k.a:
    java.lang.String id -> a
    java.lang.String name -> c
    java.lang.String ver -> b
    java.lang.String userId -> e
    java.lang.String locale -> d
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    java.lang.String getUserId() -> b
    void setId(java.lang.String) -> b
    void setLocale(java.lang.String) -> c
    void setName(java.lang.String) -> d
    void setUserId(java.lang.String) -> e
    void setVer(java.lang.String) -> f
    java.lang.String getId() -> h
    java.lang.String getLocale() -> i
    java.lang.String getName() -> j
    java.lang.String getVer() -> k
com.microsoft.appcenter.ingestion.models.one.CommonSchemaDataUtils -> b.b.a.m.d.k.b:
    void addCommonSchemaData(java.util.List,com.microsoft.appcenter.ingestion.models.one.CommonSchemaLog) -> a
    org.json.JSONObject addIntermediateMetadata(org.json.JSONObject,java.lang.String) -> a
    void addLeafMetadata(java.lang.Integer,org.json.JSONObject,java.lang.String) -> a
    boolean cleanUpEmptyObjectsInMetadata(org.json.JSONObject) -> a
    java.lang.Integer getMetadataType(com.microsoft.appcenter.ingestion.models.properties.TypedProperty) -> a
    java.lang.Object validateProperty(com.microsoft.appcenter.ingestion.models.properties.TypedProperty) -> b
com.microsoft.appcenter.ingestion.models.one.CommonSchemaLog -> b.b.a.m.d.k.c:
    java.lang.Long flags -> l
    java.lang.String name -> i
    java.lang.String ver -> h
    java.lang.String iKey -> k
    com.microsoft.appcenter.ingestion.models.one.Extensions ext -> n
    java.lang.String cV -> m
    com.microsoft.appcenter.ingestion.models.one.Data data -> o
    java.lang.Double popSample -> j
    void read(org.json.JSONObject) -> a
    void setData(com.microsoft.appcenter.ingestion.models.one.Data) -> a
    void setExt(com.microsoft.appcenter.ingestion.models.one.Extensions) -> a
    void setFlags(java.lang.Long) -> a
    void setPopSample(java.lang.Double) -> a
    void write(org.json.JSONStringer) -> a
    void setCV(java.lang.String) -> d
    void setIKey(java.lang.String) -> e
    void setName(java.lang.String) -> f
    void setVer(java.lang.String) -> g
    java.lang.String getCV() -> i
    com.microsoft.appcenter.ingestion.models.one.Data getData() -> j
    com.microsoft.appcenter.ingestion.models.one.Extensions getExt() -> k
    java.lang.Long getFlags() -> l
    java.lang.String getIKey() -> m
    java.lang.String getName() -> n
    java.lang.Double getPopSample() -> o
    java.lang.String getVer() -> p
com.microsoft.appcenter.ingestion.models.one.Data -> b.b.a.m.d.k.d:
    org.json.JSONObject mProperties -> a
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    org.json.JSONObject getProperties() -> h
com.microsoft.appcenter.ingestion.models.one.DeviceExtension -> b.b.a.m.d.k.e:
    java.lang.String localId -> a
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    void setLocalId(java.lang.String) -> b
    java.lang.String getLocalId() -> h
com.microsoft.appcenter.ingestion.models.one.Extensions -> b.b.a.m.d.k.f:
    com.microsoft.appcenter.ingestion.models.one.DeviceExtension device -> d
    com.microsoft.appcenter.ingestion.models.one.NetExtension net -> g
    com.microsoft.appcenter.ingestion.models.one.LocExtension loc -> i
    com.microsoft.appcenter.ingestion.models.one.AppExtension app -> f
    com.microsoft.appcenter.ingestion.models.one.MetadataExtension metadata -> a
    com.microsoft.appcenter.ingestion.models.one.UserExtension user -> c
    com.microsoft.appcenter.ingestion.models.one.OsExtension os -> e
    com.microsoft.appcenter.ingestion.models.one.SdkExtension sdk -> h
    com.microsoft.appcenter.ingestion.models.one.ProtocolExtension protocol -> b
    void read(org.json.JSONObject) -> a
    void setApp(com.microsoft.appcenter.ingestion.models.one.AppExtension) -> a
    void setDevice(com.microsoft.appcenter.ingestion.models.one.DeviceExtension) -> a
    void setLoc(com.microsoft.appcenter.ingestion.models.one.LocExtension) -> a
    void setMetadata(com.microsoft.appcenter.ingestion.models.one.MetadataExtension) -> a
    void setNet(com.microsoft.appcenter.ingestion.models.one.NetExtension) -> a
    void setOs(com.microsoft.appcenter.ingestion.models.one.OsExtension) -> a
    void setProtocol(com.microsoft.appcenter.ingestion.models.one.ProtocolExtension) -> a
    void setSdk(com.microsoft.appcenter.ingestion.models.one.SdkExtension) -> a
    void setUser(com.microsoft.appcenter.ingestion.models.one.UserExtension) -> a
    void write(org.json.JSONStringer) -> a
    com.microsoft.appcenter.ingestion.models.one.DeviceExtension getDevice() -> f
    com.microsoft.appcenter.ingestion.models.one.AppExtension getApp() -> h
    com.microsoft.appcenter.ingestion.models.one.LocExtension getLoc() -> i
    com.microsoft.appcenter.ingestion.models.one.MetadataExtension getMetadata() -> j
    com.microsoft.appcenter.ingestion.models.one.NetExtension getNet() -> k
    com.microsoft.appcenter.ingestion.models.one.OsExtension getOs() -> l
    com.microsoft.appcenter.ingestion.models.one.ProtocolExtension getProtocol() -> m
    com.microsoft.appcenter.ingestion.models.one.SdkExtension getSdk() -> n
    com.microsoft.appcenter.ingestion.models.one.UserExtension getUser() -> o
com.microsoft.appcenter.ingestion.models.one.LocExtension -> b.b.a.m.d.k.g:
    java.lang.String tz -> a
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    void setTz(java.lang.String) -> b
    java.lang.String getTz() -> h
com.microsoft.appcenter.ingestion.models.one.MetadataExtension -> b.b.a.m.d.k.h:
    org.json.JSONObject mMetadata -> a
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    org.json.JSONObject getMetadata() -> h
com.microsoft.appcenter.ingestion.models.one.NetExtension -> b.b.a.m.d.k.i:
    java.lang.String provider -> a
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    void setProvider(java.lang.String) -> b
    java.lang.String getProvider() -> h
com.microsoft.appcenter.ingestion.models.one.OsExtension -> b.b.a.m.d.k.j:
    java.lang.String name -> a
    java.lang.String ver -> b
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    void setName(java.lang.String) -> b
    void setVer(java.lang.String) -> c
    java.lang.String getName() -> h
    java.lang.String getVer() -> i
com.microsoft.appcenter.ingestion.models.one.PartAUtils -> b.b.a.m.d.k.k:
    java.util.regex.Pattern NAME_REGEX -> a
    void addPartAFromLog(com.microsoft.appcenter.ingestion.models.Log,com.microsoft.appcenter.ingestion.models.one.CommonSchemaLog,java.lang.String) -> a
    java.lang.String getTargetKey(java.lang.String) -> a
    void setName(com.microsoft.appcenter.ingestion.models.one.CommonSchemaLog,java.lang.String) -> a
com.microsoft.appcenter.ingestion.models.one.ProtocolExtension -> b.b.a.m.d.k.l:
    java.util.List ticketKeys -> a
    java.lang.String devModel -> c
    java.lang.String devMake -> b
    void read(org.json.JSONObject) -> a
    void setTicketKeys(java.util.List) -> a
    void write(org.json.JSONStringer) -> a
    void setDevMake(java.lang.String) -> b
    void setDevModel(java.lang.String) -> c
    java.lang.String getDevMake() -> h
    java.lang.String getDevModel() -> i
    java.util.List getTicketKeys() -> j
com.microsoft.appcenter.ingestion.models.one.SdkExtension -> b.b.a.m.d.k.m:
    java.util.UUID installId -> d
    java.lang.Long seq -> c
    java.lang.String libVer -> a
    java.lang.String epoch -> b
    void read(org.json.JSONObject) -> a
    void setSeq(java.lang.Long) -> a
    void write(org.json.JSONStringer) -> a
    void setEpoch(java.lang.String) -> b
    void setInstallId(java.util.UUID) -> b
    void setLibVer(java.lang.String) -> c
    java.lang.String getEpoch() -> h
    java.util.UUID getInstallId() -> i
    java.lang.String getLibVer() -> j
    java.lang.Long getSeq() -> k
com.microsoft.appcenter.ingestion.models.one.UserExtension -> b.b.a.m.d.k.n:
    java.lang.String localId -> a
    java.lang.String locale -> b
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    void setLocalId(java.lang.String) -> b
    void setLocale(java.lang.String) -> c
    java.lang.String getLocalId() -> h
    java.lang.String getLocale() -> i
com.microsoft.appcenter.ingestion.models.properties.BooleanTypedProperty -> b.b.a.m.d.l.a:
    boolean value -> b
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void setValue(boolean) -> a
    void write(org.json.JSONStringer) -> a
    boolean getValue() -> i
com.microsoft.appcenter.ingestion.models.properties.DateTimeTypedProperty -> b.b.a.m.d.l.b:
    java.util.Date value -> b
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    void setValue(java.util.Date) -> b
    java.util.Date getValue() -> i
com.microsoft.appcenter.ingestion.models.properties.DoubleTypedProperty -> b.b.a.m.d.l.c:
    double value -> b
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void setValue(double) -> a
    void write(org.json.JSONStringer) -> a
    double getValue() -> i
com.microsoft.appcenter.ingestion.models.properties.LongTypedProperty -> b.b.a.m.d.l.d:
    long value -> b
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void setValue(long) -> a
    void write(org.json.JSONStringer) -> a
    long getValue() -> i
com.microsoft.appcenter.ingestion.models.properties.StringTypedProperty -> b.b.a.m.d.l.e:
    java.lang.String value -> b
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    void setValue(java.lang.String) -> c
    java.lang.String getValue() -> i
com.microsoft.appcenter.ingestion.models.properties.TypedProperty -> b.b.a.m.d.l.f:
    java.lang.String name -> a
    java.lang.String getType() -> a
    void read(org.json.JSONObject) -> a
    void write(org.json.JSONStringer) -> a
    void setName(java.lang.String) -> b
    java.lang.String getName() -> h
com.microsoft.appcenter.ingestion.models.properties.TypedPropertyUtils -> b.b.a.m.d.l.g:
    com.microsoft.appcenter.ingestion.models.properties.TypedProperty create(java.lang.String) -> a
    java.util.List read(org.json.JSONObject) -> a
com.microsoft.appcenter.persistence.DatabasePersistence -> b.b.a.n.a:
    java.util.Map mPendingDbIdentifiersGroups -> c
    java.io.File mLargePayloadDirectory -> f
    java.util.Set mPendingDbIdentifiers -> d
    com.microsoft.appcenter.utils.storage.DatabaseManager mDatabaseManager -> b
    android.content.ContentValues SCHEMA -> g
    android.content.Context mContext -> e
    void deleteLogs(java.lang.String,java.lang.String) -> a
    android.content.ContentValues getContentValues(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> a
    java.io.File getLargePayloadFile(java.io.File,long) -> a
    java.lang.String getLogs(java.lang.String,java.util.Collection,int,java.util.List) -> a
    java.util.List getLogsIds(android.database.sqlite.SQLiteQueryBuilder,java.lang.String[]) -> a
    long putLog(com.microsoft.appcenter.ingestion.models.Log,java.lang.String,int) -> a
    boolean setMaxStorageSize(long) -> a
    void clearPendingLogState() -> b
    int countLogs(java.lang.String) -> b
    void deleteLog(java.io.File,long) -> b
    void deleteLogs(java.lang.String) -> c
    java.io.File getLargePayloadGroupDirectory(java.lang.String) -> d
com.microsoft.appcenter.persistence.DatabasePersistence$1 -> b.b.a.n.a$a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> a
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> a
com.microsoft.appcenter.persistence.Persistence -> b.b.a.n.b:
    com.microsoft.appcenter.ingestion.models.json.LogSerializer mLogSerializer -> a
    void deleteLogs(java.lang.String,java.lang.String) -> a
    java.lang.String getLogs(java.lang.String,java.util.Collection,int,java.util.List) -> a
    long putLog(com.microsoft.appcenter.ingestion.models.Log,java.lang.String,int) -> a
    void setLogSerializer(com.microsoft.appcenter.ingestion.models.json.LogSerializer) -> a
    boolean setMaxStorageSize(long) -> a
    void clearPendingLogState() -> b
    int countLogs(java.lang.String) -> b
    void deleteLogs(java.lang.String) -> c
    com.microsoft.appcenter.ingestion.models.json.LogSerializer getLogSerializer() -> c
com.microsoft.appcenter.persistence.Persistence$PersistenceException -> b.b.a.n.b$a:
com.microsoft.appcenter.utils.AppCenterLog -> b.b.a.o.a:
    int sLogLevel -> a
    void debug(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    int getLogLevel() -> a
    void setLogLevel(int) -> a
    void error(java.lang.String,java.lang.String) -> b
    void warn(java.lang.String,java.lang.String,java.lang.Throwable) -> b
    void info(java.lang.String,java.lang.String) -> c
    void verbose(java.lang.String,java.lang.String) -> d
    void warn(java.lang.String,java.lang.String) -> e
com.microsoft.appcenter.utils.ApplicationLifecycleListener -> b.b.a.o.b:
    android.os.Handler mHandler -> e
    java.lang.Runnable mDelayedPauseRunnable -> g
    java.util.Set mLifecycleCallbacks -> f
    int mResumedCounter -> b
    boolean mPauseSent -> c
    int mStartedCounter -> a
    boolean mStopSent -> d
    void access$000(com.microsoft.appcenter.utils.ApplicationLifecycleListener) -> a
    void registerApplicationLifecycleCallbacks(com.microsoft.appcenter.utils.ApplicationLifecycleListener$ApplicationLifecycleCallbacks) -> a
    void access$100(com.microsoft.appcenter.utils.ApplicationLifecycleListener) -> b
    void dispatchPauseIfNeeded() -> e
    void dispatchStopIfNeeded() -> f
com.microsoft.appcenter.utils.ApplicationLifecycleListener$1 -> b.b.a.o.b$a:
    com.microsoft.appcenter.utils.ApplicationLifecycleListener this$0 -> a
com.microsoft.appcenter.utils.ApplicationLifecycleListener$ApplicationLifecycleCallbacks -> b.b.a.o.b$b:
    void onApplicationEnterForeground() -> e
    void onApplicationEnterBackground() -> f
com.microsoft.appcenter.utils.DeviceInfoHelper -> b.b.a.o.c:
    com.microsoft.appcenter.ingestion.models.WrapperSdk sWrapperSdk -> a
    com.microsoft.appcenter.ingestion.models.Device getDeviceInfo(android.content.Context) -> a
    int getVersionCode(android.content.pm.PackageInfo) -> a
    java.lang.String getScreenSize(android.content.Context) -> b
com.microsoft.appcenter.utils.DeviceInfoHelper$DeviceInfoException -> b.b.a.o.c$a:
com.microsoft.appcenter.utils.HandlerUtils -> b.b.a.o.d:
    android.os.Handler sMainHandler -> a
    void runOnUiThread(java.lang.Runnable) -> a
com.microsoft.appcenter.utils.IdHelper -> b.b.a.o.e:
    java.util.UUID getInstallId() -> a
com.microsoft.appcenter.utils.InstrumentationRegistryHelper -> b.b.a.o.f:
    java.lang.String[] LOCATIONS -> a
    android.os.Bundle getArguments() -> a
    java.lang.Class getClass(java.lang.String) -> a
com.microsoft.appcenter.utils.NetworkStateHelper -> b.b.a.o.g:
    android.content.Context mContext -> a
    android.net.ConnectivityManager mConnectivityManager -> b
    java.util.concurrent.atomic.AtomicBoolean mConnected -> f
    java.util.Set mListeners -> c
    com.microsoft.appcenter.utils.NetworkStateHelper sSharedInstance -> g
    android.net.ConnectivityManager$NetworkCallback mNetworkCallback -> d
    com.microsoft.appcenter.utils.NetworkStateHelper$ConnectivityReceiver mConnectivityReceiver -> e
    void access$000(com.microsoft.appcenter.utils.NetworkStateHelper,android.net.Network) -> a
    void access$300(com.microsoft.appcenter.utils.NetworkStateHelper) -> a
    void addListener(com.microsoft.appcenter.utils.NetworkStateHelper$Listener) -> a
    com.microsoft.appcenter.utils.NetworkStateHelper getSharedInstance(android.content.Context) -> a
    void notifyNetworkStateUpdated(boolean) -> a
    void onNetworkAvailable(android.net.Network) -> a
    void reopen() -> a
    void access$100(com.microsoft.appcenter.utils.NetworkStateHelper,android.net.Network) -> b
    boolean isNetworkConnected() -> b
    void onNetworkLost(android.net.Network) -> b
    void removeListener(com.microsoft.appcenter.utils.NetworkStateHelper$Listener) -> b
    android.content.IntentFilter getOldIntentFilter() -> c
    void handleNetworkStateUpdate() -> d
    boolean isAnyNetworkConnected() -> e
com.microsoft.appcenter.utils.NetworkStateHelper$1 -> b.b.a.o.g$a:
    com.microsoft.appcenter.utils.NetworkStateHelper this$0 -> a
com.microsoft.appcenter.utils.NetworkStateHelper$ConnectivityReceiver -> b.b.a.o.g$b:
    com.microsoft.appcenter.utils.NetworkStateHelper this$0 -> a
com.microsoft.appcenter.utils.NetworkStateHelper$Listener -> b.b.a.o.g$c:
    void onNetworkStateUpdated(boolean) -> a
com.microsoft.appcenter.utils.ShutdownHelper -> b.b.a.o.h:
    void shutdown(int) -> a
com.microsoft.appcenter.utils.TicketCache -> b.b.a.o.i:
    java.util.Map sTickets -> a
    java.lang.String getTicket(java.lang.String) -> a
com.microsoft.appcenter.utils.async.AppCenterConsumer -> b.b.a.o.j.a:
    void accept(java.lang.Object) -> a
com.microsoft.appcenter.utils.async.AppCenterFuture -> b.b.a.o.j.b:
    java.lang.Object get() -> a
    void thenAccept(com.microsoft.appcenter.utils.async.AppCenterConsumer) -> a
com.microsoft.appcenter.utils.async.DefaultAppCenterFuture -> b.b.a.o.j.c:
    java.util.concurrent.CountDownLatch mLatch -> a
    java.util.Collection mConsumers -> c
    java.lang.Object mResult -> b
    java.lang.Object access$000(com.microsoft.appcenter.utils.async.DefaultAppCenterFuture) -> a
    java.util.Collection access$102(com.microsoft.appcenter.utils.async.DefaultAppCenterFuture,java.util.Collection) -> a
    void complete(java.lang.Object) -> a
    java.lang.Object get() -> a
    void thenAccept(com.microsoft.appcenter.utils.async.AppCenterConsumer) -> a
    java.util.Collection access$100(com.microsoft.appcenter.utils.async.DefaultAppCenterFuture) -> b
    boolean isDone() -> b
com.microsoft.appcenter.utils.async.DefaultAppCenterFuture$1 -> b.b.a.o.j.c$a:
    com.microsoft.appcenter.utils.async.DefaultAppCenterFuture this$0 -> b
    com.microsoft.appcenter.utils.async.AppCenterConsumer val$function -> a
com.microsoft.appcenter.utils.async.DefaultAppCenterFuture$2 -> b.b.a.o.j.c$b:
    com.microsoft.appcenter.utils.async.DefaultAppCenterFuture this$0 -> b
    java.lang.Object val$value -> a
com.microsoft.appcenter.utils.context.SessionContext -> b.b.a.o.k.a:
    long mAppLaunchTimestamp -> b
    java.util.NavigableMap mSessions -> a
    com.microsoft.appcenter.utils.context.SessionContext sInstance -> c
    void addSession(java.util.UUID) -> a
    void clearSessions() -> a
    com.microsoft.appcenter.utils.context.SessionContext$SessionInfo getSessionAt(long) -> a
    com.microsoft.appcenter.utils.context.SessionContext getInstance() -> b
com.microsoft.appcenter.utils.context.SessionContext$SessionInfo -> b.b.a.o.k.a$a:
    long mTimestamp -> a
    java.util.UUID mSessionId -> b
    long mAppLaunchTimestamp -> c
    long getAppLaunchTimestamp() -> a
    java.util.UUID getSessionId() -> b
    long getTimestamp() -> c
com.microsoft.appcenter.utils.context.UserIdContext -> b.b.a.o.k.b:
    com.microsoft.appcenter.utils.context.UserIdContext sInstance -> b
    java.lang.String mUserId -> a
    java.lang.String getPrefixedUserId(java.lang.String) -> a
    java.lang.String getUserId() -> a
    com.microsoft.appcenter.utils.context.UserIdContext getInstance() -> b
com.microsoft.appcenter.utils.crypto.CryptoAesHandler -> b.b.a.o.l.a:
    byte[] decrypt(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,int,java.security.KeyStore$Entry,byte[]) -> a
    void generateKey(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,java.lang.String,android.content.Context) -> a
    java.lang.String getAlgorithm() -> a
    byte[] encrypt(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,int,java.security.KeyStore$Entry,byte[]) -> b
com.microsoft.appcenter.utils.crypto.CryptoHandler -> b.b.a.o.l.b:
    byte[] decrypt(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,int,java.security.KeyStore$Entry,byte[]) -> a
    void generateKey(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,java.lang.String,android.content.Context) -> a
    java.lang.String getAlgorithm() -> a
    byte[] encrypt(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,int,java.security.KeyStore$Entry,byte[]) -> b
com.microsoft.appcenter.utils.crypto.CryptoNoOpHandler -> b.b.a.o.l.c:
    byte[] decrypt(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,int,java.security.KeyStore$Entry,byte[]) -> a
    void generateKey(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,java.lang.String,android.content.Context) -> a
    java.lang.String getAlgorithm() -> a
    byte[] encrypt(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,int,java.security.KeyStore$Entry,byte[]) -> b
com.microsoft.appcenter.utils.crypto.CryptoRsaHandler -> b.b.a.o.l.d:
    byte[] decrypt(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,int,java.security.KeyStore$Entry,byte[]) -> a
    void generateKey(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,java.lang.String,android.content.Context) -> a
    java.lang.String getAlgorithm() -> a
    com.microsoft.appcenter.utils.crypto.CryptoUtils$ICipher getCipher(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,int) -> a
    byte[] encrypt(com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory,int,java.security.KeyStore$Entry,byte[]) -> b
com.microsoft.appcenter.utils.crypto.CryptoUtils -> b.b.a.o.l.e:
    java.util.Map mCryptoHandlers -> a
    com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory mCryptoFactory -> c
    java.security.KeyStore mKeyStore -> e
    android.content.Context mContext -> b
    com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory DEFAULT_CRYPTO_FACTORY -> f
    com.microsoft.appcenter.utils.crypto.CryptoUtils sInstance -> g
    int mApiLevel -> d
    com.microsoft.appcenter.utils.crypto.CryptoUtils$DecryptedData decrypt(java.lang.String) -> a
    java.lang.String getAlias(com.microsoft.appcenter.utils.crypto.CryptoHandler,int) -> a
    com.microsoft.appcenter.utils.crypto.CryptoUtils$DecryptedData getDecryptedData(com.microsoft.appcenter.utils.crypto.CryptoHandler,int,java.lang.String) -> a
    com.microsoft.appcenter.utils.crypto.CryptoUtils getInstance(android.content.Context) -> a
    java.security.KeyStore$Entry getKeyStoreEntry(com.microsoft.appcenter.utils.crypto.CryptoUtils$CryptoHandlerEntry) -> a
    void registerHandler(com.microsoft.appcenter.utils.crypto.CryptoHandler) -> a
    java.lang.String encrypt(java.lang.String) -> b
    java.security.KeyStore$Entry getKeyStoreEntry(com.microsoft.appcenter.utils.crypto.CryptoHandler,int) -> b
com.microsoft.appcenter.utils.crypto.CryptoUtils$1 -> b.b.a.o.l.e$a:
    com.microsoft.appcenter.utils.crypto.CryptoUtils$IKeyGenerator getKeyGenerator(java.lang.String,java.lang.String) -> a
    com.microsoft.appcenter.utils.crypto.CryptoUtils$ICipher getCipher(java.lang.String,java.lang.String) -> b
com.microsoft.appcenter.utils.crypto.CryptoUtils$1$1 -> b.b.a.o.l.e$a$a:
    javax.crypto.KeyGenerator val$keyGenerator -> a
    void generateKey() -> a
    void init(java.security.spec.AlgorithmParameterSpec) -> a
com.microsoft.appcenter.utils.crypto.CryptoUtils$1$2 -> b.b.a.o.l.e$a$b:
    javax.crypto.Cipher val$cipher -> a
    byte[] doFinal(byte[]) -> a
    byte[] doFinal(byte[],int,int) -> a
    byte[] getIV() -> a
    void init(int,java.security.Key) -> a
    void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec) -> a
    int getBlockSize() -> b
com.microsoft.appcenter.utils.crypto.CryptoUtils$CryptoHandlerEntry -> b.b.a.o.l.e$b:
    int mAliasIndex -> b
    com.microsoft.appcenter.utils.crypto.CryptoHandler mCryptoHandler -> a
com.microsoft.appcenter.utils.crypto.CryptoUtils$DecryptedData -> b.b.a.o.l.e$c:
    java.lang.String mDecryptedData -> a
    java.lang.String getDecryptedData() -> a
com.microsoft.appcenter.utils.crypto.CryptoUtils$ICipher -> b.b.a.o.l.e$d:
    byte[] doFinal(byte[]) -> a
    byte[] doFinal(byte[],int,int) -> a
    byte[] getIV() -> a
    void init(int,java.security.Key) -> a
    void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec) -> a
    int getBlockSize() -> b
com.microsoft.appcenter.utils.crypto.CryptoUtils$ICryptoFactory -> b.b.a.o.l.e$e:
    com.microsoft.appcenter.utils.crypto.CryptoUtils$IKeyGenerator getKeyGenerator(java.lang.String,java.lang.String) -> a
    com.microsoft.appcenter.utils.crypto.CryptoUtils$ICipher getCipher(java.lang.String,java.lang.String) -> b
com.microsoft.appcenter.utils.crypto.CryptoUtils$IKeyGenerator -> b.b.a.o.l.e$f:
    void generateKey() -> a
    void init(java.security.spec.AlgorithmParameterSpec) -> a
com.microsoft.appcenter.utils.storage.DatabaseManager -> b.b.a.o.m.a:
    android.content.Context mContext -> a
    java.lang.String[] SELECT_PRIMARY_KEY -> g
    android.database.sqlite.SQLiteOpenHelper mSQLiteOpenHelper -> f
    java.lang.String mDefaultTable -> c
    com.microsoft.appcenter.utils.storage.DatabaseManager$Listener mListener -> e
    java.lang.String mDatabase -> b
    android.content.ContentValues mSchema -> d
    com.microsoft.appcenter.utils.storage.DatabaseManager$Listener access$000(com.microsoft.appcenter.utils.storage.DatabaseManager) -> a
    android.content.ContentValues buildValues(android.database.Cursor) -> a
    android.content.ContentValues buildValues(android.database.Cursor,android.content.ContentValues) -> a
    int delete(java.lang.String,java.lang.Object) -> a
    int delete(java.lang.String,java.lang.String,java.lang.Object) -> a
    void delete(long) -> a
    android.database.Cursor getCursor(android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String[],java.lang.String) -> a
    android.database.Cursor getCursor(java.lang.String,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String[],java.lang.String) -> a
    long put(android.content.ContentValues,java.lang.String) -> a
    android.database.sqlite.SQLiteDatabase getDatabase() -> b
    android.content.ContentValues nextValues(android.database.Cursor) -> b
    boolean setMaxSize(long) -> b
    long getMaxSize() -> c
com.microsoft.appcenter.utils.storage.DatabaseManager$1 -> b.b.a.o.m.a$a:
    java.lang.String val$sqlCreateCommand -> a
    com.microsoft.appcenter.utils.storage.DatabaseManager this$0 -> b
com.microsoft.appcenter.utils.storage.DatabaseManager$Listener -> b.b.a.o.m.a$b:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> a
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> a
com.microsoft.appcenter.utils.storage.FileManager -> b.b.a.o.m.b:
    android.content.Context sContext -> a
    void cleanDirectory(java.io.File) -> a
    void initialize(android.content.Context) -> a
    java.io.File lastModifiedFile(java.io.File,java.io.FilenameFilter) -> a
    void mkdir(java.lang.String) -> a
    void write(java.io.File,java.lang.String) -> a
    boolean delete(java.io.File) -> b
    boolean deleteDirectory(java.io.File) -> c
    java.lang.String read(java.io.File) -> d
    byte[] readBytes(java.io.File) -> e
com.microsoft.appcenter.utils.storage.SQLiteUtils -> b.b.a.o.m.c:
    android.database.sqlite.SQLiteQueryBuilder newSQLiteQueryBuilder() -> a
com.microsoft.appcenter.utils.storage.SharedPreferencesManager -> b.b.a.o.m.d:
    android.content.Context sContext -> a
    android.content.SharedPreferences sSharedPreferences -> b
    boolean getBoolean(java.lang.String,boolean) -> a
    int getInt(java.lang.String,int) -> a
    long getLong(java.lang.String) -> a
    long getLong(java.lang.String,long) -> a
    java.lang.String getString(java.lang.String,java.lang.String) -> a
    java.util.Set getStringSet(java.lang.String,java.util.Set) -> a
    void initialize(android.content.Context) -> a
    java.util.Set getStringSet(java.lang.String) -> b
    void putBoolean(java.lang.String,boolean) -> b
    void putInt(java.lang.String,int) -> b
    void putLong(java.lang.String,long) -> b
    void putString(java.lang.String,java.lang.String) -> b
    void putStringSet(java.lang.String,java.util.Set) -> b
    void remove(java.lang.String) -> c
io.flutter.Log -> c.a.a:
    void d(java.lang.String,java.lang.String) -> a
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void e(java.lang.String,java.lang.String) -> b
    void v(java.lang.String,java.lang.String) -> c
    void w(java.lang.String,java.lang.String) -> d
io.flutter.embedding.android.AndroidKeyProcessor -> io.flutter.embedding.android.a:
    io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel -> a
    int combiningCharacter -> c
    io.flutter.plugin.editing.TextInputPlugin textInputPlugin -> b
    java.lang.Character applyCombiningCharacterToBaseCharacter(int) -> a
    void onKeyDown(android.view.KeyEvent) -> a
    void onKeyUp(android.view.KeyEvent) -> b
io.flutter.embedding.android.AndroidTouchProcessor -> io.flutter.embedding.android.b:
    io.flutter.embedding.engine.renderer.FlutterRenderer renderer -> a
    void addPointerForIndex(android.view.MotionEvent,int,int,int,java.nio.ByteBuffer) -> a
    int getPointerChangeForAction(int) -> a
    boolean onGenericMotionEvent(android.view.MotionEvent) -> a
    int getPointerDeviceTypeForToolType(int) -> b
    boolean onTouchEvent(android.view.MotionEvent) -> b
io.flutter.embedding.android.DrawableSplashScreen -> io.flutter.embedding.android.c:
    android.widget.ImageView$ScaleType scaleType -> b
    io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView splashView -> d
    long crossfadeDurationInMillis -> c
    android.graphics.drawable.Drawable drawable -> a
    android.view.View createSplashView(android.content.Context,android.os.Bundle) -> a
    boolean doesSplashViewRememberItsTransition() -> a
    void transitionToFlutter(java.lang.Runnable) -> a
    android.os.Bundle saveSplashScreenState() -> b
io.flutter.embedding.android.DrawableSplashScreen$1 -> io.flutter.embedding.android.c$a:
    java.lang.Runnable val$onTransitionComplete -> a
io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView -> io.flutter.embedding.android.c$b:
    void setSplashDrawable(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType) -> a
io.flutter.embedding.android.FlutterActivity -> io.flutter.embedding.android.d:
    io.flutter.embedding.android.FlutterActivityAndFragmentDelegate delegate -> a
    androidx.lifecycle.LifecycleRegistry lifecycle -> b
    void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> a
    void onFlutterSurfaceViewCreated(io.flutter.embedding.android.FlutterSurfaceView) -> a
    void onFlutterTextureViewCreated(io.flutter.embedding.android.FlutterTextureView) -> a
    void onFlutterUiDisplayed() -> a
    io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context) -> a
    io.flutter.plugin.platform.PlatformPlugin providePlatformPlugin(android.app.Activity,io.flutter.embedding.engine.FlutterEngine) -> a
    void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> b
    void onFlutterUiNoLongerDisplayed() -> b
    androidx.lifecycle.Lifecycle getLifecycle() -> c
    void registerPlugins(io.flutter.embedding.engine.FlutterEngine) -> c
    android.app.Activity getActivity() -> d
    java.lang.String getInitialRoute() -> e
    io.flutter.embedding.engine.FlutterShellArgs getFlutterShellArgs() -> f
    java.lang.String getAppBundlePath() -> h
    boolean shouldAttachEngineToActivity() -> i
    io.flutter.embedding.android.RenderMode getRenderMode() -> j
    boolean shouldDestroyEngineWithHost() -> k
    io.flutter.embedding.android.TransparencyMode getTransparencyMode() -> l
    java.lang.String getCachedEngineId() -> m
    java.lang.String getDartEntrypointFunctionName() -> n
    io.flutter.embedding.android.SplashScreen provideSplashScreen() -> o
    android.content.Context getContext() -> p
    io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode getBackgroundMode() -> q
    void configureStatusBarForFullscreenFlutterExperience() -> r
    void configureWindowForTransparency() -> s
    android.view.View createFlutterView() -> t
    android.graphics.drawable.Drawable getSplashScreenFromManifest() -> u
    boolean isDebuggable() -> v
    void switchLaunchThemeForNormalTheme() -> w
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate -> io.flutter.embedding.android.e:
    io.flutter.embedding.android.FlutterSplashView flutterSplashView -> c
    io.flutter.plugin.platform.PlatformPlugin platformPlugin -> e
    io.flutter.embedding.android.FlutterView flutterView -> d
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> g
    io.flutter.embedding.engine.FlutterEngine flutterEngine -> b
    boolean isFlutterEngineFromHost -> f
    io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host host -> a
    io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host access$000(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate) -> a
    boolean isFlutterEngineFromHost() -> a
    void onActivityCreated(android.os.Bundle) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    void onAttach(android.content.Context) -> a
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onNewIntent(android.content.Intent) -> a
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
    void onTrimMemory(int) -> a
    void onBackPressed() -> b
    void onSaveInstanceState(android.os.Bundle) -> b
    void onDestroyView() -> c
    void onDetach() -> d
    void onPause() -> e
    void onPostResume() -> f
    void onResume() -> g
    void onStart() -> h
    void onStop() -> i
    void onUserLeaveHint() -> j
    void setupFlutterEngine() -> k
    void doInitialFlutterViewRun() -> l
    void ensureAlive() -> m
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$1 -> io.flutter.embedding.android.e$a:
    io.flutter.embedding.android.FlutterActivityAndFragmentDelegate this$0 -> a
    void onFlutterUiDisplayed() -> a
    void onFlutterUiNoLongerDisplayed() -> b
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host -> io.flutter.embedding.android.e$b:
    void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> a
    void onFlutterSurfaceViewCreated(io.flutter.embedding.android.FlutterSurfaceView) -> a
    void onFlutterTextureViewCreated(io.flutter.embedding.android.FlutterTextureView) -> a
    void onFlutterUiDisplayed() -> a
    io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context) -> a
    io.flutter.plugin.platform.PlatformPlugin providePlatformPlugin(android.app.Activity,io.flutter.embedding.engine.FlutterEngine) -> a
    void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> b
    void onFlutterUiNoLongerDisplayed() -> b
    androidx.lifecycle.Lifecycle getLifecycle() -> c
    android.app.Activity getActivity() -> d
    java.lang.String getInitialRoute() -> e
    io.flutter.embedding.engine.FlutterShellArgs getFlutterShellArgs() -> f
    java.lang.String getAppBundlePath() -> h
    boolean shouldAttachEngineToActivity() -> i
    io.flutter.embedding.android.RenderMode getRenderMode() -> j
    boolean shouldDestroyEngineWithHost() -> k
    io.flutter.embedding.android.TransparencyMode getTransparencyMode() -> l
    java.lang.String getCachedEngineId() -> m
    java.lang.String getDartEntrypointFunctionName() -> n
    io.flutter.embedding.android.SplashScreen provideSplashScreen() -> o
    android.content.Context getContext() -> p
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode -> io.flutter.embedding.android.f:
    io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode opaque -> a
    io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode transparent -> b
    io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] $VALUES -> c
io.flutter.embedding.android.FlutterEngineConfigurator -> io.flutter.embedding.android.g:
io.flutter.embedding.android.FlutterEngineProvider -> io.flutter.embedding.android.h:
io.flutter.embedding.android.FlutterSplashView -> io.flutter.embedding.android.FlutterSplashView:
    io.flutter.embedding.android.SplashScreen splashScreen -> a
    java.lang.String previousCompletedSplashIsolate -> f
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> h
    java.lang.Runnable onTransitionComplete -> i
    java.lang.String TAG -> j
    io.flutter.embedding.android.FlutterView flutterView -> b
    android.os.Bundle splashScreenState -> d
    io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener flutterEngineAttachmentListener -> g
    android.view.View splashScreenView -> c
    java.lang.String transitioningIsolateId -> e
    io.flutter.embedding.android.FlutterView access$000(io.flutter.embedding.android.FlutterSplashView) -> a
    java.lang.String access$402(io.flutter.embedding.android.FlutterSplashView,java.lang.String) -> a
    void displayFlutterViewWithSplash(io.flutter.embedding.android.FlutterView,io.flutter.embedding.android.SplashScreen) -> a
    boolean hasSplashCompleted() -> a
    io.flutter.embedding.android.SplashScreen access$100(io.flutter.embedding.android.FlutterSplashView) -> b
    boolean isSplashScreenNeededNow() -> b
    void access$200(io.flutter.embedding.android.FlutterSplashView) -> c
    boolean isSplashScreenTransitionNeededNow() -> c
    android.view.View access$300(io.flutter.embedding.android.FlutterSplashView) -> d
    void transitionToFlutter() -> d
    java.lang.String access$500(io.flutter.embedding.android.FlutterSplashView) -> e
    boolean wasPreviousSplashTransitionInterrupted() -> e
io.flutter.embedding.android.FlutterSplashView$1 -> io.flutter.embedding.android.FlutterSplashView$a:
    io.flutter.embedding.android.FlutterSplashView this$0 -> a
    void onFlutterEngineAttachedToFlutterView(io.flutter.embedding.engine.FlutterEngine) -> a
    void onFlutterEngineDetachedFromFlutterView() -> a
io.flutter.embedding.android.FlutterSplashView$2 -> io.flutter.embedding.android.FlutterSplashView$b:
    io.flutter.embedding.android.FlutterSplashView this$0 -> a
    void onFlutterUiDisplayed() -> a
    void onFlutterUiNoLongerDisplayed() -> b
io.flutter.embedding.android.FlutterSplashView$3 -> io.flutter.embedding.android.FlutterSplashView$c:
    io.flutter.embedding.android.FlutterSplashView this$0 -> a
io.flutter.embedding.android.FlutterSplashView$SavedState$1 -> io.flutter.embedding.android.FlutterSplashView$SavedState$a:
io.flutter.embedding.android.FlutterSurfaceView -> io.flutter.embedding.android.i:
    io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer -> d
    android.view.SurfaceHolder$Callback surfaceCallback -> e
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> f
    boolean renderTransparently -> a
    boolean isSurfaceAvailableForRendering -> b
    boolean isAttachedToFlutterRenderer -> c
    boolean access$002(io.flutter.embedding.android.FlutterSurfaceView,boolean) -> a
    boolean access$100(io.flutter.embedding.android.FlutterSurfaceView) -> a
    void access$300(io.flutter.embedding.android.FlutterSurfaceView,int,int) -> a
    void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer) -> a
    void changeSurfaceSize(int,int) -> a
    void detachFromRenderer() -> a
    void access$200(io.flutter.embedding.android.FlutterSurfaceView) -> b
    void connectSurfaceToRenderer() -> b
    void access$400(io.flutter.embedding.android.FlutterSurfaceView) -> c
    void disconnectSurfaceFromRenderer() -> c
    io.flutter.embedding.engine.renderer.FlutterRenderer access$500(io.flutter.embedding.android.FlutterSurfaceView) -> d
    void init() -> d
io.flutter.embedding.android.FlutterSurfaceView$1 -> io.flutter.embedding.android.i$a:
    io.flutter.embedding.android.FlutterSurfaceView this$0 -> a
io.flutter.embedding.android.FlutterSurfaceView$2 -> io.flutter.embedding.android.i$b:
    io.flutter.embedding.android.FlutterSurfaceView this$0 -> a
    void onFlutterUiDisplayed() -> a
    void onFlutterUiNoLongerDisplayed() -> b
io.flutter.embedding.android.FlutterTextureView -> io.flutter.embedding.android.j:
    io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer -> c
    android.view.TextureView$SurfaceTextureListener surfaceTextureListener -> e
    android.view.Surface renderSurface -> d
    boolean isSurfaceAvailableForRendering -> a
    boolean isAttachedToFlutterRenderer -> b
    boolean access$002(io.flutter.embedding.android.FlutterTextureView,boolean) -> a
    boolean access$100(io.flutter.embedding.android.FlutterTextureView) -> a
    void access$300(io.flutter.embedding.android.FlutterTextureView,int,int) -> a
    void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer) -> a
    void changeSurfaceSize(int,int) -> a
    void detachFromRenderer() -> a
    void access$200(io.flutter.embedding.android.FlutterTextureView) -> b
    void connectSurfaceToRenderer() -> b
    void access$400(io.flutter.embedding.android.FlutterTextureView) -> c
    void disconnectSurfaceFromRenderer() -> c
    void init() -> d
io.flutter.embedding.android.FlutterTextureView$1 -> io.flutter.embedding.android.j$a:
    io.flutter.embedding.android.FlutterTextureView this$0 -> a
io.flutter.embedding.android.FlutterView -> io.flutter.embedding.android.k:
    io.flutter.embedding.android.FlutterTextureView flutterTextureView -> b
    io.flutter.embedding.engine.FlutterEngine flutterEngine -> f
    io.flutter.plugin.editing.TextInputPlugin textInputPlugin -> h
    io.flutter.embedding.android.FlutterSurfaceView flutterSurfaceView -> a
    io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics viewportMetrics -> l
    java.util.Set flutterEngineAttachmentListeners -> g
    io.flutter.view.AccessibilityBridge accessibilityBridge -> k
    io.flutter.embedding.engine.renderer.RenderSurface renderSurface -> c
    io.flutter.embedding.android.AndroidKeyProcessor androidKeyProcessor -> i
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> n
    java.util.Set flutterUiDisplayListeners -> d
    boolean isFlutterUiDisplayed -> e
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener -> m
    io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor -> j
    void access$000(io.flutter.embedding.android.FlutterView,boolean,boolean) -> a
    boolean access$102(io.flutter.embedding.android.FlutterView,boolean) -> a
    java.util.Set access$200(io.flutter.embedding.android.FlutterView) -> a
    void addFlutterEngineAttachmentListener(io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener) -> a
    void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> a
    void attachToFlutterEngine(io.flutter.embedding.engine.FlutterEngine) -> a
    void detachFromFlutterEngine() -> a
    void resetWillNotDraw(boolean,boolean) -> a
    void sendLocalesToFlutter(android.content.res.Configuration) -> a
    boolean hasRenderedFirstFrame() -> b
    void removeFlutterEngineAttachmentListener(io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener) -> b
    void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> b
    boolean isAttachedToFlutterEngine() -> c
    void sendUserSettingsToFlutter() -> d
    void init() -> e
    void sendViewportMetricsToFlutter() -> f
io.flutter.embedding.android.FlutterView$1 -> io.flutter.embedding.android.k$a:
    io.flutter.embedding.android.FlutterView this$0 -> a
    void onAccessibilityChanged(boolean,boolean) -> a
io.flutter.embedding.android.FlutterView$2 -> io.flutter.embedding.android.k$b:
    io.flutter.embedding.android.FlutterView this$0 -> a
    void onFlutterUiDisplayed() -> a
    void onFlutterUiNoLongerDisplayed() -> b
io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener -> io.flutter.embedding.android.k$c:
    void onFlutterEngineAttachedToFlutterView(io.flutter.embedding.engine.FlutterEngine) -> a
    void onFlutterEngineDetachedFromFlutterView() -> a
io.flutter.embedding.android.RenderMode -> io.flutter.embedding.android.l:
    io.flutter.embedding.android.RenderMode texture -> b
    io.flutter.embedding.android.RenderMode[] $VALUES -> c
    io.flutter.embedding.android.RenderMode surface -> a
io.flutter.embedding.android.SplashScreen -> io.flutter.embedding.android.n:
    android.view.View createSplashView(android.content.Context,android.os.Bundle) -> a
    boolean doesSplashViewRememberItsTransition() -> a
    void transitionToFlutter(java.lang.Runnable) -> a
    android.os.Bundle saveSplashScreenState() -> b
io.flutter.embedding.android.SplashScreen$-CC -> io.flutter.embedding.android.m:
    boolean io.flutter.embedding.android.SplashScreen.doesSplashViewRememberItsTransition() -> a
    android.os.Bundle io.flutter.embedding.android.SplashScreen.saveSplashScreenState() -> b
io.flutter.embedding.android.SplashScreenProvider -> io.flutter.embedding.android.o:
io.flutter.embedding.android.TransparencyMode -> io.flutter.embedding.android.p:
    io.flutter.embedding.android.TransparencyMode[] $VALUES -> c
    io.flutter.embedding.android.TransparencyMode transparent -> b
    io.flutter.embedding.android.TransparencyMode opaque -> a
io.flutter.embedding.engine.FlutterEngine -> io.flutter.embedding.engine.a:
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel -> e
    io.flutter.embedding.engine.systemchannels.LifecycleChannel lifecycleChannel -> g
    io.flutter.embedding.engine.dart.DartExecutor dartExecutor -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel -> j
    io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel -> f
    io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel -> h
    io.flutter.plugin.platform.PlatformViewsController platformViewsController -> m
    io.flutter.embedding.engine.systemchannels.SettingsChannel settingsChannel -> k
    io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener engineLifecycleListener -> o
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    io.flutter.embedding.engine.systemchannels.NavigationChannel navigationChannel -> i
    io.flutter.embedding.engine.systemchannels.SystemChannel systemChannel -> l
    io.flutter.embedding.engine.renderer.FlutterRenderer renderer -> b
    io.flutter.embedding.engine.FlutterEnginePluginRegistry pluginRegistry -> d
    java.util.Set engineLifecycleListeners -> n
    java.util.Set access$000(io.flutter.embedding.engine.FlutterEngine) -> a
    void destroy() -> a
    io.flutter.plugin.platform.PlatformViewsController access$100(io.flutter.embedding.engine.FlutterEngine) -> b
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel getAccessibilityChannel() -> b
    io.flutter.embedding.engine.plugins.activity.ActivityControlSurface getActivityControlSurface() -> c
    io.flutter.embedding.engine.dart.DartExecutor getDartExecutor() -> d
    io.flutter.embedding.engine.systemchannels.KeyEventChannel getKeyEventChannel() -> e
    io.flutter.embedding.engine.systemchannels.LifecycleChannel getLifecycleChannel() -> f
    io.flutter.embedding.engine.systemchannels.LocalizationChannel getLocalizationChannel() -> g
    io.flutter.embedding.engine.systemchannels.NavigationChannel getNavigationChannel() -> h
    io.flutter.embedding.engine.systemchannels.PlatformChannel getPlatformChannel() -> i
    io.flutter.plugin.platform.PlatformViewsController getPlatformViewsController() -> j
    io.flutter.embedding.engine.plugins.PluginRegistry getPlugins() -> k
    io.flutter.embedding.engine.renderer.FlutterRenderer getRenderer() -> l
    io.flutter.embedding.engine.systemchannels.SettingsChannel getSettingsChannel() -> m
    io.flutter.embedding.engine.systemchannels.SystemChannel getSystemChannel() -> n
    void attachToJni() -> o
    boolean isAttachedToJni() -> p
    void registerPlugins() -> q
io.flutter.embedding.engine.FlutterEngine$1 -> io.flutter.embedding.engine.a$a:
    io.flutter.embedding.engine.FlutterEngine this$0 -> a
    void onPreEngineRestart() -> a
io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener -> io.flutter.embedding.engine.a$b:
    void onPreEngineRestart() -> a
io.flutter.embedding.engine.FlutterEngineCache -> io.flutter.embedding.engine.b:
    java.util.Map cachedEngines -> a
    io.flutter.embedding.engine.FlutterEngineCache instance -> b
    io.flutter.embedding.engine.FlutterEngine get(java.lang.String) -> a
    io.flutter.embedding.engine.FlutterEngineCache getInstance() -> a
    void put(java.lang.String,io.flutter.embedding.engine.FlutterEngine) -> a
    void remove(java.lang.String) -> b
io.flutter.embedding.engine.FlutterEnginePluginRegistry -> io.flutter.embedding.engine.c:
    android.content.BroadcastReceiver broadcastReceiver -> l
    io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding pluginBinding -> c
    java.util.Map contentProviderAwarePlugins -> n
    io.flutter.embedding.engine.FlutterEnginePluginRegistry$FlutterEngineContentProviderPluginBinding contentProviderPluginBinding -> p
    io.flutter.embedding.engine.FlutterEnginePluginRegistry$FlutterEngineActivityPluginBinding activityPluginBinding -> f
    android.app.Service service -> i
    java.util.Map plugins -> a
    android.app.Activity activity -> e
    java.util.Map activityAwarePlugins -> d
    io.flutter.embedding.engine.FlutterEnginePluginRegistry$FlutterEngineServicePluginBinding servicePluginBinding -> j
    io.flutter.embedding.engine.FlutterEngine flutterEngine -> b
    boolean isWaitingForActivityReattachment -> g
    java.util.Map broadcastReceiverAwarePlugins -> k
    io.flutter.embedding.engine.FlutterEnginePluginRegistry$FlutterEngineBroadcastReceiverPluginBinding broadcastReceiverPluginBinding -> m
    android.content.ContentProvider contentProvider -> o
    java.util.Map serviceAwarePlugins -> h
    void add(io.flutter.embedding.engine.plugins.FlutterPlugin) -> a
    void attachToActivity(android.app.Activity,androidx.lifecycle.Lifecycle) -> a
    boolean has(java.lang.Class) -> a
    boolean onActivityResult(int,int,android.content.Intent) -> a
    void onNewIntent(android.content.Intent) -> a
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
    void onRestoreInstanceState(android.os.Bundle) -> a
    void onUserLeaveHint() -> a
    void remove(java.util.Set) -> a
    void detachFromActivity() -> b
    void onSaveInstanceState(android.os.Bundle) -> b
    void remove(java.lang.Class) -> b
    void detachFromActivityForConfigChanges() -> c
    void destroy() -> d
    void detachFromBroadcastReceiver() -> e
    void detachFromContentProvider() -> f
    void detachFromService() -> g
    void removeAll() -> h
    void detachFromAndroidComponent() -> i
    boolean isAttachedToActivity() -> j
    boolean isAttachedToBroadcastReceiver() -> k
    boolean isAttachedToContentProvider() -> l
    boolean isAttachedToService() -> m
io.flutter.embedding.engine.FlutterEnginePluginRegistry$1 -> io.flutter.embedding.engine.c$a:
io.flutter.embedding.engine.FlutterEnginePluginRegistry$DefaultFlutterAssets -> io.flutter.embedding.engine.c$b:
io.flutter.embedding.engine.FlutterEnginePluginRegistry$FlutterEngineActivityPluginBinding -> io.flutter.embedding.engine.c$c:
    java.util.Set onActivityResultListeners -> c
    java.util.Set onNewIntentListeners -> d
    java.util.Set onUserLeaveHintListeners -> e
    java.util.Set onSaveInstanceStateListeners -> f
    java.util.Set onRequestPermissionsResultListeners -> b
    android.app.Activity activity -> a
    void addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener) -> a
    void addOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener) -> a
    void addOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener) -> a
    void addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener) -> a
    boolean onActivityResult(int,int,android.content.Intent) -> a
    void onNewIntent(android.content.Intent) -> a
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
    void onRestoreInstanceState(android.os.Bundle) -> a
    void onUserLeaveHint() -> a
    void onSaveInstanceState(android.os.Bundle) -> b
    android.app.Activity getActivity() -> d
io.flutter.embedding.engine.FlutterEnginePluginRegistry$FlutterEngineBroadcastReceiverPluginBinding -> io.flutter.embedding.engine.c$d:
io.flutter.embedding.engine.FlutterEnginePluginRegistry$FlutterEngineContentProviderPluginBinding -> io.flutter.embedding.engine.c$e:
io.flutter.embedding.engine.FlutterEnginePluginRegistry$FlutterEngineServicePluginBinding -> io.flutter.embedding.engine.c$f:
io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate -> io.flutter.embedding.engine.FlutterJNI$a:
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> a
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> b
io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate -> io.flutter.embedding.engine.FlutterJNI$b:
    void asyncWaitForVsync(long) -> a
io.flutter.embedding.engine.FlutterShellArgs -> io.flutter.embedding.engine.d:
    java.util.Set args -> a
    io.flutter.embedding.engine.FlutterShellArgs fromIntent(android.content.Intent) -> a
    java.lang.String[] toArray() -> a
io.flutter.embedding.engine.dart.DartExecutor -> io.flutter.embedding.engine.e.a:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener isolateServiceIdListener -> g
    java.lang.String isolateServiceId -> f
    io.flutter.embedding.engine.dart.DartMessenger dartMessenger -> c
    io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler isolateChannelMessageHandler -> h
    android.content.res.AssetManager assetManager -> b
    boolean isApplicationRunning -> e
    io.flutter.plugin.common.BinaryMessenger binaryMessenger -> d
    java.lang.String access$000(io.flutter.embedding.engine.dart.DartExecutor) -> a
    java.lang.String access$002(io.flutter.embedding.engine.dart.DartExecutor,java.lang.String) -> a
    void executeDartEntrypoint(io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint) -> a
    java.lang.String getIsolateServiceId() -> a
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener access$100(io.flutter.embedding.engine.dart.DartExecutor) -> b
    boolean isExecutingDart() -> b
    void onAttachedToJNI() -> c
    void onDetachedFromJNI() -> d
io.flutter.embedding.engine.dart.DartExecutor$1 -> io.flutter.embedding.engine.e.a$a:
    io.flutter.embedding.engine.dart.DartExecutor this$0 -> a
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint -> io.flutter.embedding.engine.e.a$b:
    java.lang.String pathToBundle -> a
    java.lang.String dartEntrypointFunctionName -> b
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger -> io.flutter.embedding.engine.e.a$c:
    io.flutter.embedding.engine.dart.DartMessenger messenger -> a
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener -> io.flutter.embedding.engine.e.a$d:
    void onIsolateServiceIdAvailable(java.lang.String) -> a
io.flutter.embedding.engine.dart.DartMessenger -> io.flutter.embedding.engine.e.b:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    java.util.Map messageHandlers -> b
    java.util.Map pendingReplies -> c
    int nextReplyId -> d
    void handleMessageFromDart(java.lang.String,byte[],int) -> a
    void handlePlatformMessageResponse(int,byte[]) -> a
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
io.flutter.embedding.engine.dart.DartMessenger$Reply -> io.flutter.embedding.engine.e.b$a:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    java.util.concurrent.atomic.AtomicBoolean done -> c
    int replyId -> b
    void reply(java.nio.ByteBuffer) -> a
io.flutter.embedding.engine.dart.PlatformMessageHandler -> io.flutter.embedding.engine.e.c:
    void handleMessageFromDart(java.lang.String,byte[],int) -> a
    void handlePlatformMessageResponse(int,byte[]) -> a
io.flutter.embedding.engine.loader.FlutterLoader -> io.flutter.embedding.engine.f.a:
    java.lang.String PUBLIC_VM_SNAPSHOT_DATA_KEY -> g
    java.lang.String PUBLIC_AOT_SHARED_LIBRARY_NAME -> f
    java.lang.String PUBLIC_FLUTTER_ASSETS_DIR_KEY -> i
    java.lang.String PUBLIC_ISOLATE_SNAPSHOT_DATA_KEY -> h
    io.flutter.embedding.engine.loader.FlutterLoader instance -> j
    io.flutter.embedding.engine.loader.ResourceExtractor resourceExtractor -> d
    io.flutter.embedding.engine.loader.FlutterLoader$Settings settings -> e
    java.lang.String aotSharedLibraryName -> a
    java.lang.String flutterAssetsDir -> b
    boolean initialized -> c
    void ensureInitializationComplete(android.content.Context,java.lang.String[]) -> a
    java.lang.String findAppBundlePath() -> a
    void startInitialization(android.content.Context) -> a
    void startInitialization(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader$Settings) -> a
    android.content.pm.ApplicationInfo getApplicationInfo(android.content.Context) -> b
    io.flutter.embedding.engine.loader.FlutterLoader getInstance() -> b
    void initConfig(android.content.Context) -> c
    void initResources(android.content.Context) -> d
io.flutter.embedding.engine.loader.FlutterLoader$Settings -> io.flutter.embedding.engine.f.a$a:
    java.lang.String logTag -> a
    java.lang.String getLogTag() -> a
io.flutter.embedding.engine.loader.ResourceCleaner -> io.flutter.embedding.engine.f.b:
    android.content.Context mContext -> a
    void start() -> a
io.flutter.embedding.engine.loader.ResourceCleaner$1 -> io.flutter.embedding.engine.f.b$a:
io.flutter.embedding.engine.loader.ResourceCleaner$2 -> io.flutter.embedding.engine.f.b$b:
    io.flutter.embedding.engine.loader.ResourceCleaner$CleanTask val$task -> a
io.flutter.embedding.engine.loader.ResourceCleaner$CleanTask -> io.flutter.embedding.engine.f.b$c:
    java.io.File[] mFilesToDelete -> a
    void deleteRecursively(java.io.File) -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    boolean hasFilesToDelete() -> a
io.flutter.embedding.engine.loader.ResourceExtractor -> io.flutter.embedding.engine.f.c:
    void waitForCompletion() -> a
    java.lang.String[] getSupportedAbis() -> b
io.flutter.embedding.engine.plugins.FlutterPlugin -> io.flutter.embedding.engine.g.a:
    void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding) -> a
    void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding) -> b
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets -> io.flutter.embedding.engine.g.a$a:
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding -> io.flutter.embedding.engine.g.a$b:
    io.flutter.plugin.common.BinaryMessenger binaryMessenger -> a
    io.flutter.plugin.common.BinaryMessenger getBinaryMessenger() -> a
io.flutter.embedding.engine.plugins.PluginRegistry -> io.flutter.embedding.engine.g.b:
    void add(io.flutter.embedding.engine.plugins.FlutterPlugin) -> a
io.flutter.embedding.engine.plugins.activity.ActivityAware -> io.flutter.embedding.engine.g.c.a:
    void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding) -> a
    void onDetachedFromActivity() -> a
    void onDetachedFromActivityForConfigChanges() -> b
    void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding) -> b
io.flutter.embedding.engine.plugins.activity.ActivityControlSurface -> io.flutter.embedding.engine.g.c.b:
    void attachToActivity(android.app.Activity,androidx.lifecycle.Lifecycle) -> a
    boolean onActivityResult(int,int,android.content.Intent) -> a
    void onNewIntent(android.content.Intent) -> a
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
    void onRestoreInstanceState(android.os.Bundle) -> a
    void onUserLeaveHint() -> a
    void detachFromActivity() -> b
    void onSaveInstanceState(android.os.Bundle) -> b
    void detachFromActivityForConfigChanges() -> c
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding -> io.flutter.embedding.engine.g.c.c:
    void addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener) -> a
    void addOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener) -> a
    void addOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener) -> a
    void addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener) -> a
    android.app.Activity getActivity() -> d
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener -> io.flutter.embedding.engine.g.c.c$a:
    void onRestoreInstanceState(android.os.Bundle) -> a
    void onSaveInstanceState(android.os.Bundle) -> b
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverAware -> io.flutter.embedding.engine.g.d.a:
    void onAttachedToBroadcastReceiver(io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverPluginBinding) -> a
    void onDetachedFromBroadcastReceiver() -> a
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverControlSurface -> io.flutter.embedding.engine.g.d.b:
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverPluginBinding -> io.flutter.embedding.engine.g.d.c:
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderAware -> io.flutter.embedding.engine.g.e.a:
    void onAttachedToContentProvider(io.flutter.embedding.engine.plugins.contentprovider.ContentProviderPluginBinding) -> a
    void onDetachedFromContentProvider() -> a
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderControlSurface -> io.flutter.embedding.engine.g.e.b:
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderPluginBinding -> io.flutter.embedding.engine.g.e.c:
io.flutter.embedding.engine.plugins.service.ServiceAware -> io.flutter.embedding.engine.g.f.a:
    void onAttachedToService(io.flutter.embedding.engine.plugins.service.ServicePluginBinding) -> a
    void onDetachedFromService() -> a
io.flutter.embedding.engine.plugins.service.ServiceControlSurface -> io.flutter.embedding.engine.g.f.b:
io.flutter.embedding.engine.plugins.service.ServicePluginBinding -> io.flutter.embedding.engine.g.f.c:
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry -> io.flutter.embedding.engine.g.g.a:
    java.util.Map pluginMap -> b
    io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate shimRegistrarAggregate -> c
    io.flutter.embedding.engine.FlutterEngine flutterEngine -> a
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> a
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$1 -> io.flutter.embedding.engine.g.g.a$a:
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate -> io.flutter.embedding.engine.g.g.a$b:
    io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityPluginBinding -> c
    io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding flutterPluginBinding -> b
    java.util.Set shimRegistrars -> a
    void addPlugin(io.flutter.embedding.engine.plugins.shim.ShimRegistrar) -> a
    void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding) -> a
    void onDetachedFromActivity() -> a
    void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding) -> a
    void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding) -> b
    void onDetachedFromActivityForConfigChanges() -> b
    void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding) -> b
io.flutter.embedding.engine.plugins.shim.ShimRegistrar -> io.flutter.embedding.engine.g.g.b:
    java.util.Set activityResultListeners -> c
    java.util.Set newIntentListeners -> d
    java.util.Set userLeaveHintListeners -> e
    java.util.Set viewDestroyListeners -> a
    io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding pluginBinding -> f
    java.util.Set requestPermissionsResultListeners -> b
    io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityPluginBinding -> g
    void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding) -> a
    void onDetachedFromActivity() -> a
    void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding) -> a
    void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding) -> b
    void onDetachedFromActivityForConfigChanges() -> b
    void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding) -> b
    io.flutter.plugin.common.BinaryMessenger messenger() -> c
    android.app.Activity activity() -> d
    void addExistingListenersToActivityPluginBinding() -> e
io.flutter.embedding.engine.renderer.FlutterRenderer -> io.flutter.embedding.engine.h.a:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    java.util.concurrent.atomic.AtomicLong nextTextureId -> b
    android.view.Surface surface -> c
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> e
    boolean isDisplayingFlutterUi -> d
    boolean access$002(io.flutter.embedding.engine.renderer.FlutterRenderer,boolean) -> a
    void access$300(io.flutter.embedding.engine.renderer.FlutterRenderer,long) -> a
    void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> a
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> a
    void dispatchPointerDataPacket(java.nio.ByteBuffer,int) -> a
    void markTextureFrameAvailable(long) -> a
    void registerTexture(long,android.graphics.SurfaceTexture) -> a
    void setSemanticsEnabled(boolean) -> a
    void setViewportMetrics(io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics) -> a
    void startRenderingToSurface(android.view.Surface) -> a
    void surfaceChanged(int,int) -> a
    void access$400(io.flutter.embedding.engine.renderer.FlutterRenderer,long) -> b
    boolean isDisplayingFlutterUi() -> b
    void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> b
    void unregisterTexture(long) -> b
    boolean isSoftwareRenderingEnabled() -> c
    void stopRenderingToSurface() -> d
io.flutter.embedding.engine.renderer.FlutterRenderer$1 -> io.flutter.embedding.engine.h.a$a:
    io.flutter.embedding.engine.renderer.FlutterRenderer this$0 -> a
    void onFlutterUiDisplayed() -> a
    void onFlutterUiNoLongerDisplayed() -> b
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry -> io.flutter.embedding.engine.h.a$b:
    io.flutter.embedding.engine.renderer.FlutterRenderer this$0 -> e
    android.graphics.SurfaceTexture surfaceTexture -> b
    android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener -> d
    long id -> a
    boolean released -> c
    boolean access$100(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> a
    void release() -> a
    long access$200(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> b
    long id() -> b
    android.graphics.SurfaceTexture surfaceTexture() -> c
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1 -> io.flutter.embedding.engine.h.a$b$a:
    io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry this$1 -> a
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics -> io.flutter.embedding.engine.h.a$c:
    int systemGestureInsetBottom -> n
    int systemGestureInsetLeft -> o
    int systemGestureInsetTop -> l
    int systemGestureInsetRight -> m
    int viewInsetBottom -> j
    int viewInsetLeft -> k
    int viewInsetTop -> h
    int viewInsetRight -> i
    int paddingBottom -> f
    int paddingLeft -> g
    int paddingTop -> d
    float devicePixelRatio -> a
    int paddingRight -> e
    int width -> b
    int height -> c
io.flutter.embedding.engine.renderer.FlutterUiDisplayListener -> io.flutter.embedding.engine.h.b:
    void onFlutterUiDisplayed() -> a
    void onFlutterUiNoLongerDisplayed() -> b
io.flutter.embedding.engine.renderer.RenderSurface -> io.flutter.embedding.engine.h.c:
    void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer) -> a
    void detachFromRenderer() -> a
io.flutter.embedding.engine.systemchannels.AccessibilityChannel -> io.flutter.embedding.engine.i.a:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> b
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler handler -> c
    io.flutter.plugin.common.BasicMessageChannel$MessageHandler parsingMessageHandler -> d
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$000(io.flutter.embedding.engine.systemchannels.AccessibilityChannel) -> a
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action) -> a
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object) -> a
    void onAndroidAccessibilityDisabled() -> a
    void setAccessibilityFeatures(int) -> a
    void setAccessibilityMessageHandler(io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler) -> a
    void onAndroidAccessibilityEnabled() -> b
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1 -> io.flutter.embedding.engine.i.a$a:
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel this$0 -> a
    void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> a
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler -> io.flutter.embedding.engine.i.a$b:
    void onLongPress(int) -> a
    void onTooltip(java.lang.String) -> a
    void announce(java.lang.String) -> b
    void onTap(int) -> b
io.flutter.embedding.engine.systemchannels.KeyEventChannel -> io.flutter.embedding.engine.i.b:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    void encodeKeyEvent(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent,java.util.Map) -> a
    void keyDown(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent) -> a
    void keyUp(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent) -> b
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent -> io.flutter.embedding.engine.i.b$a:
    int repeatCount -> l
    int vendorId -> j
    int productId -> k
    int metaState -> h
    int source -> i
    int scanCode -> g
    int codePoint -> d
    int keyCode -> e
    int flags -> b
    int plainCodePoint -> c
    java.lang.Character complexCharacter -> f
    int deviceId -> a
io.flutter.embedding.engine.systemchannels.LifecycleChannel -> io.flutter.embedding.engine.i.c:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    void appIsDetached() -> a
    void appIsInactive() -> b
    void appIsPaused() -> c
    void appIsResumed() -> d
io.flutter.embedding.engine.systemchannels.LocalizationChannel -> io.flutter.embedding.engine.i.d:
    io.flutter.plugin.common.MethodChannel channel -> a
    void sendLocales(java.util.List) -> a
io.flutter.embedding.engine.systemchannels.NavigationChannel -> io.flutter.embedding.engine.i.e:
    io.flutter.plugin.common.MethodChannel channel -> a
    void popRoute() -> a
    void setInitialRoute(java.lang.String) -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel -> io.flutter.embedding.engine.i.f:
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodCallHandler -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler platformMessageHandler -> b
    io.flutter.plugin.common.MethodChannel channel -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformChannel) -> a
    int access$100(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription access$200(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject) -> a
    java.util.ArrayList access$500(io.flutter.embedding.engine.systemchannels.PlatformChannel,java.util.List) -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription decodeAppSwitcherDescription(org.json.JSONObject) -> a
    java.util.ArrayList decodeExclusionRects(org.json.JSONArray) -> a
    java.util.ArrayList encodeExclusionRects(java.util.List) -> a
    void setPlatformMessageHandler(io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler) -> a
    java.util.List access$300(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle access$400(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject) -> b
    int decodeOrientations(org.json.JSONArray) -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle decodeSystemChromeStyle(org.json.JSONObject) -> b
    java.util.ArrayList access$600(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> c
    java.util.List decodeSystemUiOverlays(org.json.JSONArray) -> c
io.flutter.embedding.engine.systemchannels.PlatformChannel$1 -> io.flutter.embedding.engine.i.f$a:
    io.flutter.embedding.engine.systemchannels.PlatformChannel this$0 -> a
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel$2 -> io.flutter.embedding.engine.i.f$b:
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay -> b
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$DeviceOrientation -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription -> io.flutter.embedding.engine.i.f$c:
    java.lang.String label -> b
    int color -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness -> io.flutter.embedding.engine.i.f$d:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] $VALUES -> d
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness LIGHT -> b
    java.lang.String encodedName -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness DARK -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness fromValue(java.lang.String) -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat -> io.flutter.embedding.engine.i.f$e:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] $VALUES -> c
    java.lang.String encodedName -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat PLAIN_TEXT -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat fromValue(java.lang.String) -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation -> io.flutter.embedding.engine.i.f$f:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_UP -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] $VALUES -> f
    java.lang.String encodedName -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_RIGHT -> e
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_LEFT -> d
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_DOWN -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation fromValue(java.lang.String) -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType -> io.flutter.embedding.engine.i.f$g:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] $VALUES -> g
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType HEAVY_IMPACT -> e
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType SELECTION_CLICK -> f
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType LIGHT_IMPACT -> c
    java.lang.String encodedName -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType MEDIUM_IMPACT -> d
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType STANDARD -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType fromValue(java.lang.String) -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler -> io.flutter.embedding.engine.i.f$h:
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> a
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> a
    void restoreSystemUiOverlays() -> a
    void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> a
    void setClipboardData(java.lang.String) -> a
    void setPreferredOrientations(int) -> a
    void setSystemGestureExclusionRects(java.util.ArrayList) -> a
    void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> a
    void showSystemOverlays(java.util.List) -> a
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> a
    void popSystemNavigator() -> b
    java.util.List getSystemGestureExclusionRects() -> c
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType -> io.flutter.embedding.engine.i.f$i:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType CLICK -> b
    java.lang.String encodedName -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] $VALUES -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType fromValue(java.lang.String) -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle -> io.flutter.embedding.engine.i.f$j:
    java.lang.Integer systemNavigationBarColor -> c
    java.lang.Integer systemNavigationBarDividerColor -> e
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness systemNavigationBarIconBrightness -> d
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness statusBarIconBrightness -> b
    java.lang.Integer statusBarColor -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay -> io.flutter.embedding.engine.i.f$k:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay TOP_OVERLAYS -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay BOTTOM_OVERLAYS -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] $VALUES -> d
    java.lang.String encodedName -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay fromValue(java.lang.String) -> a
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel -> io.flutter.embedding.engine.i.g:
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingHandler -> c
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler handler -> b
    io.flutter.plugin.common.MethodChannel channel -> a
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel) -> a
    java.lang.String access$100(java.lang.Exception) -> a
    void invokeViewFocused(int) -> a
    void setPlatformViewsHandler(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler) -> a
    java.lang.String detailedExceptionString(java.lang.Exception) -> b
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1 -> io.flutter.embedding.engine.i.g$a:
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel this$0 -> a
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
    void clearFocus(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> b
    void create(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> c
    void dispose(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> d
    void resize(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> e
    void setDirection(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> f
    void touch(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> g
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1$1 -> io.flutter.embedding.engine.i.g$a$a:
    io.flutter.plugin.common.MethodChannel$Result val$result -> a
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest -> io.flutter.embedding.engine.i.g$b:
    java.nio.ByteBuffer params -> f
    double logicalWidth -> c
    double logicalHeight -> d
    int direction -> e
    java.lang.String viewType -> b
    int viewId -> a
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest -> io.flutter.embedding.engine.i.g$c:
    double newLogicalWidth -> b
    double newLogicalHeight -> c
    int viewId -> a
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch -> io.flutter.embedding.engine.i.g$d:
    int source -> n
    float yPrecision -> k
    int flags -> o
    float xPrecision -> j
    int deviceId -> l
    int edgeFlags -> m
    java.lang.Object rawPointerPropertiesList -> f
    java.lang.Object rawPointerCoords -> g
    int metaState -> h
    int buttonState -> i
    int action -> d
    int pointerCount -> e
    int viewId -> a
    java.lang.Number downTime -> b
    java.lang.Number eventTime -> c
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler -> io.flutter.embedding.engine.i.g$e:
    long createPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest) -> a
    void disposePlatformView(int) -> a
    void onTouch(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch) -> a
    void resizePlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest,java.lang.Runnable) -> a
    void setDirection(int,int) -> a
    void clearFocus(int) -> b
io.flutter.embedding.engine.systemchannels.SettingsChannel -> io.flutter.embedding.engine.i.h:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder startMessage() -> a
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder -> io.flutter.embedding.engine.i.h$a:
    java.util.Map message -> b
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    void send() -> a
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setPlatformBrightness(io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness) -> a
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setTextScaleFactor(float) -> a
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setUse24HourFormat(boolean) -> a
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness -> io.flutter.embedding.engine.i.h$b:
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness dark -> c
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] $VALUES -> d
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness light -> b
    java.lang.String name -> a
io.flutter.embedding.engine.systemchannels.SystemChannel -> io.flutter.embedding.engine.i.i:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    void sendMemoryPressureWarning() -> a
io.flutter.embedding.engine.systemchannels.TextInputChannel -> io.flutter.embedding.engine.i.j:
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler textInputMethodHandler -> b
    io.flutter.plugin.common.MethodChannel channel -> a
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler access$000(io.flutter.embedding.engine.systemchannels.TextInputChannel) -> a
    void done(int) -> a
    void requestExistingInputState() -> a
    void setTextInputMethodHandler(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler) -> a
    void updateEditingState(int,java.lang.String,int,int,int,int) -> a
    void go(int) -> b
    void newline(int) -> c
    void next(int) -> d
    void previous(int) -> e
    void search(int) -> f
    void send(int) -> g
    void unspecifiedAction(int) -> h
io.flutter.embedding.engine.systemchannels.TextInputChannel$1 -> io.flutter.embedding.engine.i.j$a:
    io.flutter.embedding.engine.systemchannels.TextInputChannel this$0 -> a
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration -> io.flutter.embedding.engine.i.j$b:
    java.lang.String actionLabel -> g
    java.lang.Integer inputAction -> f
    io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType inputType -> e
    boolean obscureText -> a
    boolean autocorrect -> b
    boolean enableSuggestions -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization textCapitalization -> d
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration fromJson(org.json.JSONObject) -> a
    java.lang.Integer inputActionFromTextInputAction(java.lang.String) -> a
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType -> io.flutter.embedding.engine.i.j$c:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType type -> a
    boolean isSigned -> b
    boolean isDecimal -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType fromJson(org.json.JSONObject) -> a
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization -> io.flutter.embedding.engine.i.j$d:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization CHARACTERS -> b
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization WORDS -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] $VALUES -> f
    java.lang.String encodedName -> a
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization SENTENCES -> d
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization NONE -> e
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization fromValue(java.lang.String) -> a
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState -> io.flutter.embedding.engine.i.j$e:
    java.lang.String text -> a
    int selectionStart -> b
    int selectionEnd -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState fromJson(org.json.JSONObject) -> a
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler -> io.flutter.embedding.engine.i.j$f:
    void clearClient() -> a
    void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> a
    void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> a
    void setPlatformViewClient(int) -> a
    void show() -> b
    void hide() -> c
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType -> io.flutter.embedding.engine.i.j$g:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType DATETIME -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType TEXT -> b
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType PHONE -> e
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NUMBER -> d
    java.lang.String encodedName -> a
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType EMAIL_ADDRESS -> g
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType MULTILINE -> f
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType VISIBLE_PASSWORD -> i
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType URL -> h
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] $VALUES -> j
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType fromValue(java.lang.String) -> a
io.flutter.plugin.common.BasicMessageChannel -> c.a.b.a.a:
    io.flutter.plugin.common.MessageCodec codec -> c
    io.flutter.plugin.common.BinaryMessenger messenger -> a
    java.lang.String name -> b
    io.flutter.plugin.common.MessageCodec access$200(io.flutter.plugin.common.BasicMessageChannel) -> a
    void send(java.lang.Object) -> a
    void send(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> a
    void setMessageHandler(io.flutter.plugin.common.BasicMessageChannel$MessageHandler) -> a
    java.lang.String access$300(io.flutter.plugin.common.BasicMessageChannel) -> b
io.flutter.plugin.common.BasicMessageChannel$1 -> c.a.b.a.a$a:
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler -> c.a.b.a.a$b:
    io.flutter.plugin.common.BasicMessageChannel$MessageHandler handler -> a
    io.flutter.plugin.common.BasicMessageChannel this$0 -> b
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1 -> c.a.b.a.a$b$a:
    io.flutter.plugin.common.BinaryMessenger$BinaryReply val$callback -> a
    io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler this$1 -> b
    void reply(java.lang.Object) -> a
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler -> c.a.b.a.a$c:
    io.flutter.plugin.common.BasicMessageChannel$Reply callback -> a
    io.flutter.plugin.common.BasicMessageChannel this$0 -> b
    void reply(java.nio.ByteBuffer) -> a
io.flutter.plugin.common.BasicMessageChannel$MessageHandler -> c.a.b.a.a$d:
    void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> a
io.flutter.plugin.common.BasicMessageChannel$Reply -> c.a.b.a.a$e:
    void reply(java.lang.Object) -> a
io.flutter.plugin.common.BinaryMessenger -> c.a.b.a.b:
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler -> c.a.b.a.b$a:
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
io.flutter.plugin.common.BinaryMessenger$BinaryReply -> c.a.b.a.b$b:
    void reply(java.nio.ByteBuffer) -> a
io.flutter.plugin.common.FlutterException -> c.a.b.a.c:
    java.lang.Object details -> b
    java.lang.String code -> a
io.flutter.plugin.common.JSONMessageCodec -> c.a.b.a.d:
    io.flutter.plugin.common.JSONMessageCodec INSTANCE -> a
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
io.flutter.plugin.common.JSONMethodCodec -> c.a.b.a.e:
    io.flutter.plugin.common.JSONMethodCodec INSTANCE -> a
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> a
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> a
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> a
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> b
    java.lang.Object unwrapNull(java.lang.Object) -> b
io.flutter.plugin.common.JSONUtil -> c.a.b.a.f:
    java.lang.Object wrap(java.lang.Object) -> a
io.flutter.plugin.common.MessageCodec -> c.a.b.a.g:
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
io.flutter.plugin.common.MethodCall -> c.a.b.a.h:
    java.lang.Object arguments -> b
    java.lang.String method -> a
    java.lang.Object argument(java.lang.String) -> a
    java.lang.Object arguments() -> a
io.flutter.plugin.common.MethodChannel -> c.a.b.a.i:
    io.flutter.plugin.common.MethodCodec codec -> c
    io.flutter.plugin.common.BinaryMessenger messenger -> a
    java.lang.String name -> b
    io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.MethodChannel) -> a
    void invokeMethod(java.lang.String,java.lang.Object) -> a
    void invokeMethod(java.lang.String,java.lang.Object,io.flutter.plugin.common.MethodChannel$Result) -> a
    void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> a
    java.lang.String access$100(io.flutter.plugin.common.MethodChannel) -> b
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler -> c.a.b.a.i$a:
    io.flutter.plugin.common.MethodChannel$MethodCallHandler handler -> a
    io.flutter.plugin.common.MethodChannel this$0 -> b
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1 -> c.a.b.a.i$a$a:
    io.flutter.plugin.common.BinaryMessenger$BinaryReply val$reply -> a
    io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler this$1 -> b
    void error(java.lang.String,java.lang.String,java.lang.Object) -> a
    void notImplemented() -> a
    void success(java.lang.Object) -> a
io.flutter.plugin.common.MethodChannel$IncomingResultHandler -> c.a.b.a.i$b:
    io.flutter.plugin.common.MethodChannel$Result callback -> a
    io.flutter.plugin.common.MethodChannel this$0 -> b
    void reply(java.nio.ByteBuffer) -> a
io.flutter.plugin.common.MethodChannel$MethodCallHandler -> c.a.b.a.i$c:
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
io.flutter.plugin.common.MethodChannel$Result -> c.a.b.a.i$d:
    void error(java.lang.String,java.lang.String,java.lang.Object) -> a
    void notImplemented() -> a
    void success(java.lang.Object) -> a
io.flutter.plugin.common.MethodCodec -> c.a.b.a.j:
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> a
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> a
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> a
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> b
io.flutter.plugin.common.PluginRegistry -> c.a.b.a.k:
io.flutter.plugin.common.PluginRegistry$ActivityResultListener -> c.a.b.a.k$a:
    boolean onActivityResult(int,int,android.content.Intent) -> a
io.flutter.plugin.common.PluginRegistry$NewIntentListener -> c.a.b.a.k$b:
    boolean onNewIntent(android.content.Intent) -> a
io.flutter.plugin.common.PluginRegistry$Registrar -> c.a.b.a.k$c:
    io.flutter.plugin.common.BinaryMessenger messenger() -> c
    android.app.Activity activity() -> d
io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener -> c.a.b.a.k$d:
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener -> c.a.b.a.k$e:
    void onUserLeaveHint() -> a
io.flutter.plugin.common.PluginRegistry$ViewDestroyListener -> c.a.b.a.k$f:
    boolean onViewDestroy(io.flutter.view.FlutterNativeView) -> a
io.flutter.plugin.common.StandardMessageCodec -> c.a.b.a.l:
    java.nio.charset.Charset UTF8 -> c
    io.flutter.plugin.common.StandardMessageCodec INSTANCE -> a
    boolean LITTLE_ENDIAN -> b
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    void readAlignment(java.nio.ByteBuffer,int) -> a
    java.lang.Object readValueOfType(byte,java.nio.ByteBuffer) -> a
    void writeAlignment(java.io.ByteArrayOutputStream,int) -> a
    void writeBytes(java.io.ByteArrayOutputStream,byte[]) -> a
    void writeDouble(java.io.ByteArrayOutputStream,double) -> a
    void writeLong(java.io.ByteArrayOutputStream,long) -> a
    void writeValue(java.io.ByteArrayOutputStream,java.lang.Object) -> a
    java.lang.Object readValue(java.nio.ByteBuffer) -> b
    void writeChar(java.io.ByteArrayOutputStream,int) -> b
    byte[] readBytes(java.nio.ByteBuffer) -> c
    void writeInt(java.io.ByteArrayOutputStream,int) -> c
    int readSize(java.nio.ByteBuffer) -> d
    void writeSize(java.io.ByteArrayOutputStream,int) -> d
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream -> c.a.b.a.l$a:
    byte[] buffer() -> b
io.flutter.plugin.common.StandardMethodCodec -> c.a.b.a.m:
    io.flutter.plugin.common.StandardMessageCodec messageCodec -> a
    io.flutter.plugin.common.StandardMethodCodec INSTANCE -> b
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> a
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> a
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> a
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> b
io.flutter.plugin.common.StringCodec -> c.a.b.a.n:
    java.nio.charset.Charset UTF8 -> a
    io.flutter.plugin.common.StringCodec INSTANCE -> b
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> a
    java.lang.String decodeMessage(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    java.nio.ByteBuffer encodeMessage(java.lang.String) -> a
io.flutter.plugin.editing.InputConnectionAdaptor -> c.a.b.b.a:
    io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel -> c
    boolean isSamsung -> i
    android.view.inputmethod.EditorInfo mEditorInfo -> e
    android.view.View mFlutterView -> a
    int mBatchCount -> f
    android.view.inputmethod.InputMethodManager mImm -> g
    android.text.Editable mEditable -> d
    int mClient -> b
    android.text.Layout mLayout -> h
    int clampIndexToEditable(int,android.text.Editable) -> a
    boolean isSamsung() -> a
    void updateEditingState() -> b
io.flutter.plugin.editing.TextInputPlugin -> c.a.b.b.b:
    io.flutter.plugin.platform.PlatformViewsController platformViewsController -> i
    io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel -> c
    io.flutter.plugin.editing.TextInputPlugin$InputTarget inputTarget -> d
    boolean restartAlwaysRequired -> j
    boolean isInputConnectionLocked -> k
    android.view.View mView -> a
    android.text.Editable mEditable -> f
    boolean mRestartInputPending -> g
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration configuration -> e
    android.view.inputmethod.InputMethodManager mImm -> b
    android.view.inputmethod.InputConnection lastInputConnection -> h
    android.view.View access$000(io.flutter.plugin.editing.TextInputPlugin) -> a
    void access$100(io.flutter.plugin.editing.TextInputPlugin,android.view.View) -> a
    void access$300(io.flutter.plugin.editing.TextInputPlugin,int) -> a
    void applyStateToSelection(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> a
    void clearPlatformViewClient(int) -> a
    android.view.inputmethod.InputConnection createInputConnection(android.view.View,android.view.inputmethod.EditorInfo) -> a
    void destroy() -> a
    void hideTextInput(android.view.View) -> a
    int inputTypeFromTextInputType(io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,boolean,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization) -> a
    void setTextInputClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> a
    void setTextInputEditingState(android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> a
    void access$200(io.flutter.plugin.editing.TextInputPlugin,android.view.View) -> b
    void access$400(io.flutter.plugin.editing.TextInputPlugin) -> b
    android.view.inputmethod.InputMethodManager getInputMethodManager() -> b
    void setPlatformViewTextInputClient(int) -> b
    void showTextInput(android.view.View) -> b
    android.view.inputmethod.InputConnection getLastInputConnection() -> c
    void lockPlatformViewInputConnection() -> d
    void unlockPlatformViewInputConnection() -> e
    void clearTextInputClient() -> f
    boolean isRestartAlwaysRequired() -> g
io.flutter.plugin.editing.TextInputPlugin$1 -> c.a.b.b.b$a:
    io.flutter.plugin.editing.TextInputPlugin this$0 -> a
    void clearClient() -> a
    void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> a
    void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> a
    void setPlatformViewClient(int) -> a
    void show() -> b
    void hide() -> c
io.flutter.plugin.editing.TextInputPlugin$InputTarget -> c.a.b.b.b$b:
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type type -> a
    int id -> b
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type -> c.a.b.b.b$b$a:
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] $VALUES -> d
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type PLATFORM_VIEW -> c
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type NO_TARGET -> a
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type FRAMEWORK_CLIENT -> b
io.flutter.plugin.platform.-$$Lambda$PlatformViewsController$1$yCLpCrkCk5PKTxnfIMt18jB15HI -> io.flutter.plugin.platform.a:
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest f$1 -> b
    io.flutter.plugin.platform.PlatformViewsController$1 f$0 -> a
io.flutter.plugin.platform.AccessibilityEventsDelegate -> io.flutter.plugin.platform.b:
    io.flutter.view.AccessibilityBridge accessibilityBridge -> a
    boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void setAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> a
io.flutter.plugin.platform.PlatformPlugin -> io.flutter.plugin.platform.c:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle currentTheme -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler mPlatformMessageHandler -> e
    int mEnabledOverlays -> d
    android.app.Activity activity -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel -> b
    void access$000(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> a
    void access$100(io.flutter.plugin.platform.PlatformPlugin,int) -> a
    void access$1000(io.flutter.plugin.platform.PlatformPlugin,java.util.ArrayList) -> a
    void access$200(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> a
    void access$300(io.flutter.plugin.platform.PlatformPlugin,java.util.List) -> a
    void access$400(io.flutter.plugin.platform.PlatformPlugin) -> a
    void access$500(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> a
    java.lang.CharSequence access$700(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> a
    void access$800(io.flutter.plugin.platform.PlatformPlugin,java.lang.String) -> a
    void destroy() -> a
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> a
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> a
    void setClipboardData(java.lang.String) -> a
    void setSystemChromeApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> a
    void setSystemChromeEnabledSystemUIOverlays(java.util.List) -> a
    void setSystemChromePreferredOrientations(int) -> a
    void setSystemChromeSystemUIOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> a
    void setSystemGestureExclusionRects(java.util.ArrayList) -> a
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> a
    void access$600(io.flutter.plugin.platform.PlatformPlugin) -> b
    void updateSystemUiOverlays() -> b
    java.util.List access$900(io.flutter.plugin.platform.PlatformPlugin) -> c
    java.util.List getSystemGestureExclusionRects() -> c
    void popSystemNavigator() -> d
    void restoreSystemChromeSystemUIOverlays() -> e
io.flutter.plugin.platform.PlatformPlugin$1 -> io.flutter.plugin.platform.c$a:
    io.flutter.plugin.platform.PlatformPlugin this$0 -> a
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> a
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> a
    void restoreSystemUiOverlays() -> a
    void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> a
    void setClipboardData(java.lang.String) -> a
    void setPreferredOrientations(int) -> a
    void setSystemGestureExclusionRects(java.util.ArrayList) -> a
    void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> a
    void showSystemOverlays(java.util.List) -> a
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> a
    void popSystemNavigator() -> b
    java.util.List getSystemGestureExclusionRects() -> c
io.flutter.plugin.platform.PlatformPlugin$2 -> io.flutter.plugin.platform.c$b:
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay -> b
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$Brightness -> c
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$HapticFeedbackType -> a
io.flutter.plugin.platform.PlatformView -> io.flutter.plugin.platform.d:
    void onFlutterViewAttached(android.view.View) -> a
    void onInputConnectionUnlocked() -> a
    void onInputConnectionLocked() -> b
    void dispose() -> c
    void onFlutterViewDetached() -> d
    android.view.View getView() -> e
io.flutter.plugin.platform.PlatformViewFactory -> io.flutter.plugin.platform.e:
    io.flutter.plugin.common.MessageCodec createArgsCodec -> a
    io.flutter.plugin.platform.PlatformView create(android.content.Context,int,java.lang.Object) -> a
    io.flutter.plugin.common.MessageCodec getCreateArgsCodec() -> a
io.flutter.plugin.platform.PlatformViewRegistry -> io.flutter.plugin.platform.f:
io.flutter.plugin.platform.PlatformViewRegistryImpl -> io.flutter.plugin.platform.g:
    java.util.Map viewFactories -> a
    io.flutter.plugin.platform.PlatformViewFactory getFactory(java.lang.String) -> a
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate -> io.flutter.plugin.platform.h:
    void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> a
    void detachAccessibiltyBridge() -> a
    android.view.View getPlatformViewById(java.lang.Integer) -> a
io.flutter.plugin.platform.PlatformViewsController -> io.flutter.plugin.platform.i:
    java.util.HashMap contextToPlatformView -> i
    java.util.HashMap vdControllers -> h
    android.content.Context context -> b
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> g
    io.flutter.view.TextureRegistry textureRegistry -> d
    io.flutter.plugin.platform.PlatformViewRegistryImpl registry -> a
    android.view.View flutterView -> c
    io.flutter.plugin.editing.TextInputPlugin textInputPlugin -> e
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel platformViewsChannel -> f
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler channelHandler -> j
    boolean access$000(int) -> a
    io.flutter.plugin.platform.PlatformViewRegistryImpl access$100(io.flutter.plugin.platform.PlatformViewsController) -> a
    void access$1000(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.VirtualDisplayController) -> a
    java.util.List access$1200(java.lang.Object) -> a
    java.util.List access$1300(java.lang.Object,float) -> a
    int access$200(io.flutter.plugin.platform.PlatformViewsController,double) -> a
    void access$300(io.flutter.plugin.platform.PlatformViewsController,int,int) -> a
    void attach(android.content.Context,io.flutter.view.TextureRegistry,io.flutter.embedding.engine.dart.DartExecutor) -> a
    void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> a
    void attachTextInputPlugin(io.flutter.plugin.editing.TextInputPlugin) -> a
    void attachToView(android.view.View) -> a
    void detachAccessibiltyBridge() -> a
    android.view.View getPlatformViewById(java.lang.Integer) -> a
    void lockInputConnection(io.flutter.plugin.platform.VirtualDisplayController) -> a
    int toPhysicalPixels(double) -> a
    void validateVirtualDisplayDimensions(int,int) -> a
    void access$1100(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.VirtualDisplayController) -> b
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel access$1400(io.flutter.plugin.platform.PlatformViewsController) -> b
    boolean checkInputConnectionProxy(android.view.View) -> b
    void detach() -> b
    android.view.MotionEvent$PointerCoords parsePointerCoords(java.lang.Object,float) -> b
    android.view.MotionEvent$PointerProperties parsePointerProperties(java.lang.Object) -> b
    void unlockInputConnection(io.flutter.plugin.platform.VirtualDisplayController) -> b
    boolean validateDirection(int) -> b
    io.flutter.view.TextureRegistry access$400(io.flutter.plugin.platform.PlatformViewsController) -> c
    void detachFromView() -> c
    java.util.List parsePointerCoordsList(java.lang.Object,float) -> c
    java.util.List parsePointerPropertiesList(java.lang.Object) -> c
    android.content.Context access$500(io.flutter.plugin.platform.PlatformViewsController) -> d
    void detachTextInputPlugin() -> d
    io.flutter.plugin.platform.AccessibilityEventsDelegate access$600(io.flutter.plugin.platform.PlatformViewsController) -> e
    io.flutter.plugin.platform.PlatformViewRegistry getRegistry() -> e
    android.view.View access$700(io.flutter.plugin.platform.PlatformViewsController) -> f
    void onPreEngineRestart() -> f
    java.util.HashMap access$800(io.flutter.plugin.platform.PlatformViewsController) -> g
    void flushAllViews() -> g
    io.flutter.plugin.editing.TextInputPlugin access$900(io.flutter.plugin.platform.PlatformViewsController) -> h
io.flutter.plugin.platform.PlatformViewsController$1 -> io.flutter.plugin.platform.i$a:
    io.flutter.plugin.platform.PlatformViewsController this$0 -> a
    long createPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest) -> a
    void disposePlatformView(int) -> a
    void ensureValidAndroidVersion() -> a
    void lambda$createPlatformView$0(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest,android.view.View,boolean) -> a
    void onTouch(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch) -> a
    void resizePlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest,java.lang.Runnable) -> a
    void setDirection(int,int) -> a
    void clearFocus(int) -> b
io.flutter.plugin.platform.PlatformViewsController$1$1 -> io.flutter.plugin.platform.i$a$a:
    io.flutter.plugin.platform.VirtualDisplayController val$vdController -> a
    java.lang.Runnable val$onComplete -> b
    io.flutter.plugin.platform.PlatformViewsController$1 this$1 -> c
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout -> io.flutter.plugin.platform.SingleViewPresentation$a:
    android.view.View embeddedView -> b
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> a
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup -> io.flutter.plugin.platform.SingleViewPresentation$b:
    android.graphics.Rect viewBounds -> a
    android.graphics.Rect childRect -> b
    int atMost(int) -> a
io.flutter.plugin.platform.SingleViewPresentation$ImmContext -> io.flutter.plugin.platform.SingleViewPresentation$c:
    android.view.inputmethod.InputMethodManager inputMethodManager -> a
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext -> io.flutter.plugin.platform.SingleViewPresentation$d:
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler windowManagerHandler -> a
    android.view.WindowManager windowManager -> b
    android.view.WindowManager getWindowManager() -> a
io.flutter.plugin.platform.SingleViewPresentation$PresentationState -> io.flutter.plugin.platform.SingleViewPresentation$e:
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup fakeWindowViewGroup -> c
    io.flutter.plugin.platform.PlatformView platformView -> a
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler windowManagerHandler -> b
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$000(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> a
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$002(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup) -> a
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$102(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler) -> a
    io.flutter.plugin.platform.PlatformView access$202(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.PlatformView) -> a
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$100(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> b
    io.flutter.plugin.platform.PlatformView access$200(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> c
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler -> io.flutter.plugin.platform.SingleViewPresentation$f:
    android.view.WindowManager delegate -> a
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup fakeWindowRootView -> b
    void addView(java.lang.Object[]) -> a
    android.view.WindowManager getWindowManager() -> a
    void removeView(java.lang.Object[]) -> b
    void removeViewImmediate(java.lang.Object[]) -> c
    void updateViewLayout(java.lang.Object[]) -> d
io.flutter.plugin.platform.VirtualDisplayController -> io.flutter.plugin.platform.j:
    android.content.Context context -> a
    android.hardware.display.VirtualDisplay virtualDisplay -> f
    android.view.View$OnFocusChangeListener focusChangeListener -> e
    io.flutter.plugin.platform.SingleViewPresentation presentation -> g
    io.flutter.view.TextureRegistry$SurfaceTextureEntry textureEntry -> d
    int densityDpi -> c
    android.view.Surface surface -> h
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> b
    io.flutter.plugin.platform.VirtualDisplayController create(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.view.TextureRegistry$SurfaceTextureEntry,int,int,int,java.lang.Object,android.view.View$OnFocusChangeListener) -> a
    void dispose() -> a
    void onFlutterViewAttached(android.view.View) -> a
    void resize(int,int,java.lang.Runnable) -> a
    android.view.View getView() -> b
    void onFlutterViewDetached() -> c
    void onInputConnectionLocked() -> d
    void onInputConnectionUnlocked() -> e
io.flutter.plugin.platform.VirtualDisplayController$1 -> io.flutter.plugin.platform.j$a:
    java.lang.Runnable val$onNewSizeFrameAvailable -> b
    android.view.View val$embeddedView -> a
io.flutter.plugin.platform.VirtualDisplayController$1$1 -> io.flutter.plugin.platform.j$a$a:
    io.flutter.plugin.platform.VirtualDisplayController$1 this$1 -> a
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener -> io.flutter.plugin.platform.j$b:
    java.lang.Runnable mOnDrawRunnable -> b
    android.view.View mView -> a
    void schedule(android.view.View,java.lang.Runnable) -> a
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1 -> io.flutter.plugin.platform.j$b$a:
    io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener this$0 -> a
io.flutter.util.PathUtils -> c.a.c.a:
    java.lang.String getCacheDirectory(android.content.Context) -> a
    java.lang.String getFilesDir(android.content.Context) -> b
io.flutter.util.Predicate -> c.a.c.b:
    boolean test(java.lang.Object) -> a
io.flutter.view.-$$Lambda$AccessibilityBridge$JBDpWWlF54eN0gel8Jn1hY7yOmE -> io.flutter.view.a:
    io.flutter.view.AccessibilityBridge$SemanticsNode f$0 -> a
    boolean test(java.lang.Object) -> a
io.flutter.view.-$$Lambda$AccessibilityBridge$_xgAbWhyKyeHrMGUVUYzbSFEeBY -> io.flutter.view.b:
    io.flutter.view.-$$Lambda$AccessibilityBridge$_xgAbWhyKyeHrMGUVUYzbSFEeBY INSTANCE -> a
    boolean test(java.lang.Object) -> a
io.flutter.view.AccessibilityBridge -> io.flutter.view.c:
    io.flutter.view.AccessibilityViewEmbedder accessibilityViewEmbedder -> d
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel -> b
    int accessibilityFeatureFlags -> l
    java.util.List flutterNavigationStack -> p
    io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate platformViewsAccessibilityDelegate -> e
    java.lang.Integer embeddedAccessibilityFocusedNodeId -> j
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener -> s
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler accessibilityMessageHandler -> t
    android.database.ContentObserver animationScaleObserver -> w
    io.flutter.view.AccessibilityBridge$SemanticsNode inputFocusedSemanticsNode -> m
    int FIRST_RESOURCE_ID -> x
    io.flutter.view.AccessibilityBridge$SemanticsNode hoveredObject -> o
    android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener touchExplorationStateChangeListener -> v
    io.flutter.view.AccessibilityBridge$SemanticsNode lastInputFocusedSemanticsNode -> n
    android.view.View rootAccessibilityView -> a
    io.flutter.view.AccessibilityBridge$SemanticsNode accessibilityFocusedSemanticsNode -> i
    java.lang.Integer embeddedInputFocusedNodeId -> k
    android.content.ContentResolver contentResolver -> f
    android.view.accessibility.AccessibilityManager accessibilityManager -> c
    android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener accessibilityStateChangeListener -> u
    java.util.Map flutterSemanticsTree -> g
    java.util.Map customAccessibilityActions -> h
    int previousRouteId -> q
    java.lang.Integer lastLeftFrameInset -> r
    android.view.View access$000(io.flutter.view.AccessibilityBridge) -> a
    void access$100(io.flutter.view.AccessibilityBridge,int,int) -> a
    void access$300(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityEvent) -> a
    io.flutter.view.AccessibilityBridge$SemanticsNode access$5900(io.flutter.view.AccessibilityBridge,int) -> a
    android.view.accessibility.AccessibilityEvent createTextChangedEvent(int,java.lang.String,java.lang.String) -> a
    boolean externalViewRequestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction getOrCreateAccessibilityAction(int) -> a
    void handleTouchExploration(float,float) -> a
    boolean isAccessibilityEnabled() -> a
    boolean lambda$shouldSetCollectionInfo$0(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode) -> a
    boolean lambda$shouldSetCollectionInfo$1(io.flutter.view.AccessibilityBridge$SemanticsNode) -> a
    android.view.accessibility.AccessibilityEvent obtainAccessibilityEvent(int,int) -> a
    boolean onAccessibilityHoverEvent(android.view.MotionEvent) -> a
    boolean performCursorMoveAction(io.flutter.view.AccessibilityBridge$SemanticsNode,int,android.os.Bundle,boolean) -> a
    void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> a
    void setOnAccessibilityChangeListener(io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener) -> a
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> a
    void access$1000(io.flutter.view.AccessibilityBridge) -> b
    android.view.accessibility.AccessibilityEvent access$200(io.flutter.view.AccessibilityBridge,int,int) -> b
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$6000(io.flutter.view.AccessibilityBridge,int) -> b
    io.flutter.view.AccessibilityBridge$SemanticsNode getOrCreateSemanticsNode(int) -> b
    boolean isTouchExplorationEnabled() -> b
    void sendAccessibilityEvent(int,int) -> b
    void sendWindowChangeEvent(io.flutter.view.AccessibilityBridge$SemanticsNode) -> b
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> b
    void access$1100(io.flutter.view.AccessibilityBridge) -> c
    int access$902(io.flutter.view.AccessibilityBridge,int) -> c
    void release() -> c
    void sendWindowContentChangeEvent(int) -> c
    boolean shouldSetCollectionInfo(io.flutter.view.AccessibilityBridge$SemanticsNode) -> c
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$400(io.flutter.view.AccessibilityBridge) -> d
    io.flutter.view.AccessibilityBridge$SemanticsNode getRootSemanticsNode() -> d
    void willRemoveSemanticsNode(io.flutter.view.AccessibilityBridge$SemanticsNode) -> d
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel access$500(io.flutter.view.AccessibilityBridge) -> e
    void onTouchExplorationExit() -> e
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener access$600(io.flutter.view.AccessibilityBridge) -> f
    void sendLatestAccessibilityFlagsToFlutter() -> f
    android.view.accessibility.AccessibilityManager access$700(io.flutter.view.AccessibilityBridge) -> g
    android.content.ContentResolver access$800(io.flutter.view.AccessibilityBridge) -> h
    int access$900(io.flutter.view.AccessibilityBridge) -> i
io.flutter.view.AccessibilityBridge$1 -> io.flutter.view.c$a:
    io.flutter.view.AccessibilityBridge this$0 -> a
    void onLongPress(int) -> a
    void onTooltip(java.lang.String) -> a
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> a
    void announce(java.lang.String) -> b
    void onTap(int) -> b
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> b
io.flutter.view.AccessibilityBridge$2 -> io.flutter.view.c$b:
    io.flutter.view.AccessibilityBridge this$0 -> a
io.flutter.view.AccessibilityBridge$3 -> io.flutter.view.c$c:
    io.flutter.view.AccessibilityBridge this$0 -> a
io.flutter.view.AccessibilityBridge$4 -> io.flutter.view.c$d:
    android.view.accessibility.AccessibilityManager val$accessibilityManager -> a
    io.flutter.view.AccessibilityBridge this$0 -> b
io.flutter.view.AccessibilityBridge$AccessibilityFeature -> io.flutter.view.c$e:
    io.flutter.view.AccessibilityBridge$AccessibilityFeature ACCESSIBLE_NAVIGATION -> b
    io.flutter.view.AccessibilityBridge$AccessibilityFeature INVERT_COLORS -> c
    io.flutter.view.AccessibilityBridge$AccessibilityFeature DISABLE_ANIMATIONS -> d
    io.flutter.view.AccessibilityBridge$AccessibilityFeature[] $VALUES -> e
    int value -> a
io.flutter.view.AccessibilityBridge$Action -> io.flutter.view.c$f:
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_WORD -> v
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_WORD -> u
    io.flutter.view.AccessibilityBridge$Action DISMISS -> t
    io.flutter.view.AccessibilityBridge$Action CUSTOM_ACTION -> s
    io.flutter.view.AccessibilityBridge$Action TAP -> b
    int value -> a
    io.flutter.view.AccessibilityBridge$Action SCROLL_UP -> f
    io.flutter.view.AccessibilityBridge$Action SCROLL_RIGHT -> e
    io.flutter.view.AccessibilityBridge$Action SCROLL_LEFT -> d
    io.flutter.view.AccessibilityBridge$Action LONG_PRESS -> c
    io.flutter.view.AccessibilityBridge$Action SHOW_ON_SCREEN -> j
    io.flutter.view.AccessibilityBridge$Action DECREASE -> i
    io.flutter.view.AccessibilityBridge$Action INCREASE -> h
    io.flutter.view.AccessibilityBridge$Action SCROLL_DOWN -> g
    io.flutter.view.AccessibilityBridge$Action COPY -> n
    io.flutter.view.AccessibilityBridge$Action SET_SELECTION -> m
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_CHARACTER -> l
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_CHARACTER -> k
    io.flutter.view.AccessibilityBridge$Action DID_LOSE_ACCESSIBILITY_FOCUS -> r
    io.flutter.view.AccessibilityBridge$Action DID_GAIN_ACCESSIBILITY_FOCUS -> q
    io.flutter.view.AccessibilityBridge$Action PASTE -> p
    io.flutter.view.AccessibilityBridge$Action[] $VALUES -> w
    io.flutter.view.AccessibilityBridge$Action CUT -> o
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction -> io.flutter.view.c$g:
    int id -> b
    int overrideId -> c
    java.lang.String hint -> e
    int resourceId -> a
    java.lang.String label -> d
    java.lang.String access$2700(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> a
    java.lang.String access$2702(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String) -> a
    int access$3102(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> a
    int access$3100(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> b
    java.lang.String access$3202(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String) -> b
    int access$3602(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> b
    java.lang.String access$3200(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> c
    int access$3802(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> c
    int access$3600(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> d
    int access$3800(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> e
io.flutter.view.AccessibilityBridge$Flag -> io.flutter.view.c$h:
    io.flutter.view.AccessibilityBridge$Flag IS_OBSCURED -> l
    io.flutter.view.AccessibilityBridge$Flag IS_HEADER -> k
    io.flutter.view.AccessibilityBridge$Flag IS_IN_MUTUALLY_EXCLUSIVE_GROUP -> j
    io.flutter.view.AccessibilityBridge$Flag IS_ENABLED -> i
    io.flutter.view.AccessibilityBridge$Flag IS_IMAGE -> p
    io.flutter.view.AccessibilityBridge$Flag IS_HIDDEN -> o
    io.flutter.view.AccessibilityBridge$Flag NAMES_ROUTE -> n
    io.flutter.view.AccessibilityBridge$Flag SCOPES_ROUTE -> m
    io.flutter.view.AccessibilityBridge$Flag HAS_IMPLICIT_SCROLLING -> t
    io.flutter.view.AccessibilityBridge$Flag[] $VALUES -> x
    io.flutter.view.AccessibilityBridge$Flag IS_TOGGLED -> s
    io.flutter.view.AccessibilityBridge$Flag HAS_TOGGLED_STATE -> r
    io.flutter.view.AccessibilityBridge$Flag IS_LIVE_REGION -> q
    io.flutter.view.AccessibilityBridge$Flag IS_LINK -> w
    io.flutter.view.AccessibilityBridge$Flag IS_FOCUSABLE -> v
    io.flutter.view.AccessibilityBridge$Flag IS_READ_ONLY -> u
    int value -> a
    io.flutter.view.AccessibilityBridge$Flag IS_SELECTED -> d
    io.flutter.view.AccessibilityBridge$Flag IS_CHECKED -> c
    io.flutter.view.AccessibilityBridge$Flag HAS_CHECKED_STATE -> b
    io.flutter.view.AccessibilityBridge$Flag HAS_ENABLED_STATE -> h
    io.flutter.view.AccessibilityBridge$Flag IS_FOCUSED -> g
    io.flutter.view.AccessibilityBridge$Flag IS_TEXT_FIELD -> f
    io.flutter.view.AccessibilityBridge$Flag IS_BUTTON -> e
io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener -> io.flutter.view.c$i:
    void onAccessibilityChanged(boolean,boolean) -> a
io.flutter.view.AccessibilityBridge$SemanticsNode -> io.flutter.view.c$j:
    int scrollChildren -> j
    int textSelectionExtent -> h
    int currentValueLength -> f
    float right -> D
    int actions -> d
    float left -> B
    java.lang.String value -> p
    int id -> b
    java.lang.String decreasedValue -> r
    float previousScrollPosition -> y
    java.lang.String previousValue -> z
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onTapOverride -> K
    int previousTextSelectionBase -> w
    java.util.List childrenInHitTestOrder -> I
    int previousFlags -> u
    io.flutter.view.AccessibilityBridge$SemanticsNode parent -> G
    android.graphics.Rect globalRect -> Q
    float scrollExtentMax -> m
    float scrollPosition -> l
    boolean inverseTransformDirty -> M
    float[] inverseTransform -> N
    boolean globalGeometryDirty -> O
    int scrollIndex -> k
    int platformViewId -> i
    float bottom -> E
    java.lang.String label -> o
    int textSelectionBase -> g
    float top -> C
    float[] transform -> F
    io.flutter.view.AccessibilityBridge accessibilityBridge -> a
    java.lang.String increasedValue -> q
    int maxValueLength -> e
    java.lang.String hint -> s
    int flags -> c
    boolean hadPreviousConfig -> t
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onLongPressOverride -> L
    int previousTextSelectionExtent -> x
    int previousActions -> v
    java.util.List customAccessibilityActions -> J
    java.lang.String previousLabel -> A
    java.util.List childrenInTraversalOrder -> H
    float scrollExtentMin -> n
    float[] globalTransform -> P
    java.lang.String access$5400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> A
    java.lang.String access$5500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> B
    int access$5600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> C
    int access$5700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> D
    java.lang.String access$5800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> E
    int access$1200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> a
    boolean access$1300(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate) -> a
    int access$1602(io.flutter.view.AccessibilityBridge$SemanticsNode,int) -> a
    boolean access$1800(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag) -> a
    boolean access$2100(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action) -> a
    java.lang.String access$2302(io.flutter.view.AccessibilityBridge$SemanticsNode,java.lang.String) -> a
    io.flutter.view.AccessibilityBridge$SemanticsNode access$2502(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode) -> a
    io.flutter.view.AccessibilityBridge$SemanticsNode access$3700(io.flutter.view.AccessibilityBridge$SemanticsNode,float[]) -> a
    void access$3900(io.flutter.view.AccessibilityBridge$SemanticsNode,java.nio.ByteBuffer,java.lang.String[]) -> a
    boolean access$4102(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean) -> a
    void access$4300(io.flutter.view.AccessibilityBridge$SemanticsNode,float[],java.util.Set,boolean) -> a
    void access$4400(io.flutter.view.AccessibilityBridge$SemanticsNode,java.util.List) -> a
    void collectRoutes(java.util.List) -> a
    boolean didChangeLabel() -> a
    io.flutter.view.AccessibilityBridge$SemanticsNode getAncestor(io.flutter.util.Predicate) -> a
    boolean hadAction(io.flutter.view.AccessibilityBridge$Action) -> a
    boolean hadFlag(io.flutter.view.AccessibilityBridge$Flag) -> a
    io.flutter.view.AccessibilityBridge$SemanticsNode hitTest(float[]) -> a
    float max(float,float,float,float) -> a
    void transformPoint(float[],float[],float[]) -> a
    void updateRecursively(float[],java.util.Set,boolean) -> a
    void updateWith(java.nio.ByteBuffer,java.lang.String[]) -> a
    int access$1400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> b
    boolean access$4202(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean) -> b
    boolean access$4900(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action) -> b
    boolean access$5300(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag) -> b
    boolean didScroll() -> b
    boolean hasAction(io.flutter.view.AccessibilityBridge$Action) -> b
    boolean hasFlag(io.flutter.view.AccessibilityBridge$Flag) -> b
    float min(float,float,float,float) -> b
    boolean nullableHasAncestor(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate) -> b
    android.graphics.Rect access$1500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> c
    void ensureInverseTransform() -> c
    int access$1600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> d
    android.graphics.Rect getGlobalRect() -> d
    boolean access$1700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> e
    java.lang.String getRouteName() -> e
    int access$1900(io.flutter.view.AccessibilityBridge$SemanticsNode) -> f
    java.lang.String getValueLabelHint() -> f
    int access$2000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> g
    boolean isFocusable() -> g
    int access$2200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> h
    java.lang.String access$2300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> i
    int access$2400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> j
    io.flutter.view.AccessibilityBridge$SemanticsNode access$2500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> k
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> l
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> m
    java.lang.String access$2900(io.flutter.view.AccessibilityBridge$SemanticsNode) -> n
    java.util.List access$3000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> o
    java.util.List access$3300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> p
    java.lang.String access$3400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> q
    java.lang.String access$3500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> r
    boolean access$4000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> s
    boolean access$4500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> t
    float access$4600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> u
    float access$4700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> v
    float access$4800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> w
    int access$5000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> x
    java.util.List access$5100(io.flutter.view.AccessibilityBridge$SemanticsNode) -> y
    boolean access$5200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> z
io.flutter.view.AccessibilityBridge$TextDirection -> io.flutter.view.c$k:
    io.flutter.view.AccessibilityBridge$TextDirection[] $VALUES -> d
    io.flutter.view.AccessibilityBridge$TextDirection UNKNOWN -> a
    io.flutter.view.AccessibilityBridge$TextDirection LTR -> b
    io.flutter.view.AccessibilityBridge$TextDirection RTL -> c
    io.flutter.view.AccessibilityBridge$TextDirection fromInt(int) -> a
io.flutter.view.AccessibilityViewEmbedder$1 -> io.flutter.view.AccessibilityViewEmbedder$a:
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors -> io.flutter.view.AccessibilityViewEmbedder$b:
    java.lang.reflect.Method getRecordSourceNodeId -> c
    java.lang.reflect.Method getChildId -> d
    java.lang.reflect.Field childNodeIdsField -> e
    java.lang.reflect.Method longArrayGetIndex -> f
    java.lang.reflect.Method getSourceNodeId -> a
    java.lang.reflect.Method getParentNodeId -> b
    java.lang.Long access$100(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo) -> a
    int access$200(long) -> a
    java.lang.Long access$500(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo,int) -> a
    java.lang.Long access$600(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityRecord) -> a
    java.lang.Long getChildId(android.view.accessibility.AccessibilityNodeInfo,int) -> a
    java.lang.Long getParentNodeId(android.view.accessibility.AccessibilityNodeInfo) -> a
    java.lang.Long getRecordSourceNodeId(android.view.accessibility.AccessibilityRecord) -> a
    boolean isBitSet(long,int) -> a
    java.lang.Long access$300(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo) -> b
    java.lang.Long getSourceNodeId(android.view.accessibility.AccessibilityNodeInfo) -> b
    int getVirtualNodeId(long) -> b
    java.lang.Long yoinkParentIdFromParcel(android.view.accessibility.AccessibilityNodeInfo) -> c
io.flutter.view.AccessibilityViewEmbedder$ViewAndId -> io.flutter.view.AccessibilityViewEmbedder$c:
    android.view.View view -> a
    int id -> b
io.flutter.view.FlutterMain -> io.flutter.view.d:
    boolean isRunningInRobolectricTest -> a
    java.lang.String findAppBundlePath() -> a
    void startInitialization(android.content.Context) -> a
io.flutter.view.FlutterNativeView -> io.flutter.view.e:
io.flutter.view.TextureRegistry -> io.flutter.view.f:
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> a
io.flutter.view.TextureRegistry$SurfaceTextureEntry -> io.flutter.view.f$a:
    void release() -> a
    long id() -> b
    android.graphics.SurfaceTexture surfaceTexture() -> c
io.flutter.view.VsyncWaiter -> io.flutter.view.g:
    android.view.WindowManager windowManager -> a
    io.flutter.view.VsyncWaiter instance -> c
    io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate -> b
    android.view.WindowManager access$000(io.flutter.view.VsyncWaiter) -> a
    io.flutter.view.VsyncWaiter getInstance(android.view.WindowManager) -> a
    void init() -> a
io.flutter.view.VsyncWaiter$1 -> io.flutter.view.g$a:
    io.flutter.view.VsyncWaiter this$0 -> a
    void asyncWaitForVsync(long) -> a
io.flutter.view.VsyncWaiter$1$1 -> io.flutter.view.g$a$a:
    long val$cookie -> a
    io.flutter.view.VsyncWaiter$1 this$1 -> b
